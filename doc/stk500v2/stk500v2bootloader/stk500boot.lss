
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fe2  0003e000  0003e000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800200  00800200  00002056  2**0
                  ALLOC
  2 .stab         000008dc  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000013c  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000028  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000009df  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000265a  00000000  00000000  00003477  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ea  00000000  00000000  00005ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d7  00000000  00000000  00005dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00007494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c07  00000000  00000000  00007564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001716  00000000  00000000  0000816b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00009881  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	0d 94 f6 f2 	jmp	0x3e5ec	; 0x3e5ec <__ctors_end>
   3e004:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e008:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e00c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e010:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e014:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e018:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e01c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e020:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e024:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e028:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e02c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e030:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e034:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e038:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e03c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e040:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e044:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e048:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e04c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e050:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e054:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e058:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e05c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e060:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e064:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e068:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e06c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e070:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e074:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e078:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e07c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e080:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e084:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e088:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e08c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e090:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e094:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e098:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e09c:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0a0:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0a4:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0a8:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0ac:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0b0:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0b4:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0b8:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0bc:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0c0:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0c4:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0c8:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0cc:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0d0:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0d4:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0d8:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0dc:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>
   3e0e0:	0d 94 1f f3 	jmp	0x3e63e	; 0x3e63e <__bad_interrupt>

0003e0e4 <gTextMsg_CPU_Name>:
   3e0e4:	41 54 6d 65 67 61 32 35 36 30 00                    ATmega2560.

0003e0ef <gTextMsg_Explorer>:
   3e0ef:	41 72 64 75 69 6e 6f 20 65 78 70 6c 6f 72 65 72     Arduino explorer
   3e0ff:	20 73 74 6b 35 30 30 56 32 20 62 79 20 4d 4c 53      stk500V2 by MLS
	...

0003e110 <gTextMsg_Prompt>:
   3e110:	42 6f 6f 74 6c 6f 61 64 65 72 3e 00                 Bootloader>.

0003e11c <gTextMsg_HUH>:
   3e11c:	48 75 68 3f 00                                      Huh?.

0003e121 <gTextMsg_COMPILED_ON>:
   3e121:	43 6f 6d 70 69 6c 65 64 20 6f 6e 20 20 3d 20 00     Compiled on  = .

0003e131 <gTextMsg_CPU_Type>:
   3e131:	43 50 55 20 54 79 70 65 20 20 20 20 20 3d 20 00     CPU Type     = .

0003e141 <gTextMsg_AVR_ARCH>:
   3e141:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 20 3d 20 00     __AVR_ARCH__ = .

0003e151 <gTextMsg_AVR_LIBC>:
   3e151:	41 56 52 20 4c 69 62 43 20 56 65 72 20 3d 20 00     AVR LibC Ver = .

0003e161 <gTextMsg_GCC_VERSION>:
   3e161:	47 43 43 20 56 65 72 73 69 6f 6e 20 20 3d 20 00     GCC Version  = .

0003e171 <gTextMsg_CPU_SIGNATURE>:
   3e171:	43 50 55 20 73 69 67 6e 61 74 75 72 65 3d 20 00     CPU signature= .

0003e181 <gTextMsg_FUSE_BYTE_LOW>:
   3e181:	4c 6f 77 20 66 75 73 65 20 20 20 20 20 3d 20 00     Low fuse     = .

0003e191 <gTextMsg_FUSE_BYTE_HIGH>:
   3e191:	48 69 67 68 20 66 75 73 65 20 20 20 20 3d 20 00     High fuse    = .

0003e1a1 <gTextMsg_FUSE_BYTE_EXT>:
   3e1a1:	45 78 74 20 66 75 73 65 20 20 20 20 20 3d 20 00     Ext fuse     = .

0003e1b1 <gTextMsg_FUSE_BYTE_LOCK>:
   3e1b1:	4c 6f 63 6b 20 66 75 73 65 20 20 20 20 3d 20 00     Lock fuse    = .

0003e1c1 <gTextMsg_GCC_DATE_STR>:
   3e1c1:	53 65 70 20 32 38 20 32 30 31 30 00                 Sep 28 2010.

0003e1cd <gTextMsg_AVR_LIBC_VER_STR>:
   3e1cd:	31 2e 36 2e 37 00                                   1.6.7.

0003e1d3 <gTextMsg_GCC_VERSION_STR>:
   3e1d3:	34 2e 33 2e 33 00                                   4.3.3.

0003e1d9 <gTextMsg_VECTOR_HEADER>:
   3e1d9:	56 23 20 20 20 41 44 44 52 20 20 20 6f 70 20 63     V#   ADDR   op c
   3e1e9:	6f 64 65 20 20 20 20 20 69 6e 73 74 72 75 63 74     ode     instruct
   3e1f9:	69 6f 6e 20 61 64 64 72 20 20 20 49 6e 74 65 72     ion addr   Inter
   3e209:	72 75 70 74 00                                      rupt.

0003e20e <gTextMsg_noVector>:
   3e20e:	6e 6f 20 76 65 63 74 6f 72 00                       no vector.

0003e218 <gTextMsg_rjmp>:
   3e218:	72 6a 6d 70 20 20 00                                rjmp  .

0003e21f <gTextMsg_jmp>:
   3e21f:	6a 6d 70 20 00                                      jmp .

0003e224 <gTextMsg_WHAT_PORT>:
   3e224:	57 68 61 74 20 70 6f 72 74 3a 00                    What port:.

0003e22f <gTextMsg_PortNotSupported>:
   3e22f:	50 6f 72 74 20 6e 6f 74 20 73 75 70 70 6f 72 74     Port not support
   3e23f:	65 64 00                                            ed.

0003e242 <gTextMsg_MustBeLetter>:
   3e242:	4d 75 73 74 20 62 65 20 61 20 6c 65 74 74 65 72     Must be a letter
	...

0003e253 <gTextMsg_SPACE>:
   3e253:	20 00                                                .

0003e255 <gTextMsg_WriteToEEprom>:
   3e255:	57 72 69 74 74 69 6e 67 20 45 45 00                 Writting EE.

0003e261 <gTextMsg_ReadingEEprom>:
   3e261:	52 65 61 64 69 6e 67 20 45 45 00                    Reading EE.

0003e26c <gTextMsg_EEPROMerrorCnt>:
   3e26c:	65 65 70 72 6f 6d 20 65 72 72 6f 72 20 63 6f 75     eeprom error cou
   3e27c:	6e 74 3d 00                                         nt=.

0003e280 <gTextMsg_PORT>:
   3e280:	50 4f 52 54 00                                      PORT.

0003e285 <gTextMsg_HELP_MSG_0>:
   3e285:	30 3d 5a 65 72 6f 20 61 64 64 72 65 73 73 20 63     0=Zero address c
   3e295:	74 72 73 00                                         trs.

0003e299 <gTextMsg_HELP_MSG_QM>:
   3e299:	3f 3d 43 50 55 20 73 74 61 74 73 00                 ?=CPU stats.

0003e2a5 <gTextMsg_HELP_MSG_AT>:
   3e2a5:	40 3d 45 45 50 52 4f 4d 20 74 65 73 74 00           @=EEPROM test.

0003e2b3 <gTextMsg_HELP_MSG_B>:
   3e2b3:	42 3d 42 6c 69 6e 6b 20 4c 45 44 00                 B=Blink LED.

0003e2bf <gTextMsg_HELP_MSG_E>:
   3e2bf:	45 3d 44 75 6d 70 20 45 45 50 52 4f 4d 00           E=Dump EEPROM.

0003e2cd <gTextMsg_HELP_MSG_F>:
   3e2cd:	46 3d 44 75 6d 70 20 46 4c 41 53 48 00              F=Dump FLASH.

0003e2da <gTextMsg_HELP_MSG_H>:
   3e2da:	48 3d 48 65 6c 70 00                                H=Help.

0003e2e1 <gTextMsg_HELP_MSG_L>:
   3e2e1:	4c 3d 4c 69 73 74 20 49 2f 4f 20 50 6f 72 74 73     L=List I/O Ports
	...

0003e2f2 <gTextMsg_HELP_MSG_Q>:
   3e2f2:	51 3d 51 75 69 74 20 26 20 6a 75 6d 70 20 74 6f     Q=Quit & jump to
   3e302:	20 75 73 65 72 20 70 67 6d 00                        user pgm.

0003e30c <gTextMsg_HELP_MSG_R>:
   3e30c:	52 3d 44 75 6d 70 20 52 41 4d 00                    R=Dump RAM.

0003e317 <gTextMsg_HELP_MSG_V>:
   3e317:	56 3d 73 68 6f 77 20 69 6e 74 65 72 72 75 70 74     V=show interrupt
   3e327:	20 56 65 63 74 6f 72 73 00                           Vectors.

0003e330 <gTextMsg_HELP_MSG_Y>:
   3e330:	59 3d 50 6f 72 74 20 62 6c 69 6e 6b 00              Y=Port blink.

0003e33d <gTextMsg_END>:
   3e33d:	2a 00                                               *.

0003e33f <gAvrInt_RESET>:
   3e33f:	52 45 53 45 54 00                                   RESET.

0003e345 <gAvrInt_INT0>:
   3e345:	49 4e 54 30 00                                      INT0.

0003e34a <gAvrInt_INT1>:
   3e34a:	49 4e 54 31 00                                      INT1.

0003e34f <gAvrInt_INT2>:
   3e34f:	49 4e 54 32 00                                      INT2.

0003e354 <gAvrInt_INT3>:
   3e354:	49 4e 54 33 00                                      INT3.

0003e359 <gAvrInt_INT4>:
   3e359:	49 4e 54 34 00                                      INT4.

0003e35e <gAvrInt_INT5>:
   3e35e:	49 4e 54 35 00                                      INT5.

0003e363 <gAvrInt_INT6>:
   3e363:	49 4e 54 36 00                                      INT6.

0003e368 <gAvrInt_INT7>:
   3e368:	49 4e 54 37 00                                      INT7.

0003e36d <gAvrInt_PCINT0>:
   3e36d:	50 43 49 4e 54 30 00                                PCINT0.

0003e374 <gAvrInt_PCINT1>:
   3e374:	50 43 49 4e 54 31 00                                PCINT1.

0003e37b <gAvrInt_PCINT2>:
   3e37b:	50 43 49 4e 54 32 00                                PCINT2.

0003e382 <gAvrInt_WDT>:
   3e382:	57 44 54 00                                         WDT.

0003e386 <gAvrInt_TIMER0_COMPA>:
   3e386:	54 49 4d 45 52 30 20 43 4f 4d 50 41 00              TIMER0 COMPA.

0003e393 <gAvrInt_TIMER0_COMPB>:
   3e393:	54 49 4d 45 52 30 20 43 4f 4d 50 42 00              TIMER0 COMPB.

0003e3a0 <gAvrInt_TIMER0_OVF>:
   3e3a0:	54 49 4d 45 52 30 20 4f 56 46 00                    TIMER0 OVF.

0003e3ab <gAvrInt_TIMER1_CAPT>:
   3e3ab:	54 49 4d 45 52 31 20 43 41 50 54 00                 TIMER1 CAPT.

0003e3b7 <gAvrInt_TIMER1_COMPA>:
   3e3b7:	54 49 4d 45 52 31 20 43 4f 4d 50 41 00              TIMER1 COMPA.

0003e3c4 <gAvrInt_TIMER1_COMPB>:
   3e3c4:	54 49 4d 45 52 31 20 43 4f 4d 50 42 00              TIMER1 COMPB.

0003e3d1 <gAvrInt_TIMER1_COMPC>:
   3e3d1:	54 49 4d 45 52 31 20 43 4f 4d 50 43 00              TIMER1 COMPC.

0003e3de <gAvrInt_TIMER1_OVF>:
   3e3de:	54 49 4d 45 52 31 20 4f 56 46 00                    TIMER1 OVF.

0003e3e9 <gAvrInt_TIMER2_COMPA>:
   3e3e9:	54 49 4d 45 52 32 20 43 4f 4d 50 41 00              TIMER2 COMPA.

0003e3f6 <gAvrInt_TIMER2_COMPB>:
   3e3f6:	54 49 4d 45 52 32 20 43 4f 4d 50 42 00              TIMER2 COMPB.

0003e403 <gAvrInt_TIMER2_OVF>:
   3e403:	54 49 4d 45 52 32 20 4f 56 46 00                    TIMER2 OVF.

0003e40e <gAvrInt_TIMER3_CAPT>:
   3e40e:	54 49 4d 45 52 33 20 43 41 50 54 00                 TIMER3 CAPT.

0003e41a <gAvrInt_TIMER3_COMPA>:
   3e41a:	54 49 4d 45 52 33 20 43 4f 4d 50 41 00              TIMER3 COMPA.

0003e427 <gAvrInt_TIMER3_COMPB>:
   3e427:	54 49 4d 45 52 33 20 43 4f 4d 50 42 00              TIMER3 COMPB.

0003e434 <gAvrInt_TIMER3_COMPC>:
   3e434:	54 49 4d 45 52 33 20 43 4f 4d 50 43 00              TIMER3 COMPC.

0003e441 <gAvrInt_TIMER3_OVF>:
   3e441:	54 49 4d 45 52 33 20 4f 56 46 00                    TIMER3 OVF.

0003e44c <gAvrInt_TIMER4_CAPT>:
   3e44c:	54 49 4d 45 52 34 20 43 41 50 54 00                 TIMER4 CAPT.

0003e458 <gAvrInt_TIMER4_COMPA>:
   3e458:	54 49 4d 45 52 34 20 43 4f 4d 50 41 00              TIMER4 COMPA.

0003e465 <gAvrInt_TIMER4_COMPB>:
   3e465:	54 49 4d 45 52 34 20 43 4f 4d 50 42 00              TIMER4 COMPB.

0003e472 <gAvrInt_TIMER4_COMPC>:
   3e472:	54 49 4d 45 52 34 20 43 4f 4d 50 43 00              TIMER4 COMPC.

0003e47f <gAvrInt_TIMER4_OVF>:
   3e47f:	54 49 4d 45 52 34 20 4f 56 46 00                    TIMER4 OVF.

0003e48a <gAvrInt_TIMER5_CAPT>:
   3e48a:	54 49 4d 45 52 35 20 43 41 50 54 00                 TIMER5 CAPT.

0003e496 <gAvrInt_TIMER5_COMPA>:
   3e496:	54 49 4d 45 52 35 20 43 4f 4d 50 41 00              TIMER5 COMPA.

0003e4a3 <gAvrInt_TIMER5_COMPB>:
   3e4a3:	54 49 4d 45 52 35 20 43 4f 4d 50 42 00              TIMER5 COMPB.

0003e4b0 <gAvrInt_TIMER5_COMPC>:
   3e4b0:	54 49 4d 45 52 35 20 43 4f 4d 50 43 00              TIMER5 COMPC.

0003e4bd <gAvrInt_TIMER5_OVF>:
   3e4bd:	54 49 4d 45 52 35 20 4f 56 46 00                    TIMER5 OVF.

0003e4c8 <gAvrInt_USART0_RX>:
   3e4c8:	55 53 41 52 54 30 20 52 58 00                       USART0 RX.

0003e4d2 <gAvrInt_USART0_UDRE>:
   3e4d2:	55 53 41 52 54 30 20 55 44 52 45 00                 USART0 UDRE.

0003e4de <gAvrInt_USART0_TX>:
   3e4de:	55 53 41 52 54 30 20 54 58 00                       USART0 TX.

0003e4e8 <gAvrInt_USART1_RX>:
   3e4e8:	55 53 41 52 54 31 20 52 58 00                       USART1 RX.

0003e4f2 <gAvrInt_USART1_UDRE>:
   3e4f2:	55 53 41 52 54 31 20 55 44 52 45 00                 USART1 UDRE.

0003e4fe <gAvrInt_USART1_TX>:
   3e4fe:	55 53 41 52 54 31 20 54 58 00                       USART1 TX.

0003e508 <gAvrInt_USART2_RX>:
   3e508:	55 53 41 52 54 32 20 52 58 00                       USART2 RX.

0003e512 <gAvrInt_USART2_UDRE>:
   3e512:	55 53 41 52 54 32 20 55 44 52 45 00                 USART2 UDRE.

0003e51e <gAvrInt_USART2_TX>:
   3e51e:	55 53 41 52 54 32 20 54 58 00                       USART2 TX.

0003e528 <gAvrInt_USART3_RX>:
   3e528:	55 53 41 52 54 33 20 52 58 00                       USART3 RX.

0003e532 <gAvrInt_USART3_UDRE>:
   3e532:	55 53 41 52 54 33 20 55 44 52 45 00                 USART3 UDRE.

0003e53e <gAvrInt_USART3_TX>:
   3e53e:	55 53 41 52 54 33 20 54 58 00                       USART3 TX.

0003e548 <gAvrInt_SPI_STC>:
   3e548:	53 50 49 20 53 54 43 00                             SPI STC.

0003e550 <gAvrInt_ADC>:
   3e550:	41 44 43 00                                         ADC.

0003e554 <gAvrInt_ANALOG_COMP>:
   3e554:	41 4e 41 4c 4f 47 20 43 4f 4d 50 00                 ANALOG COMP.

0003e560 <gAvrInt_EE_READY>:
   3e560:	45 45 20 52 45 41 44 59 00                          EE READY.

0003e569 <gAvrInt_TWI>:
   3e569:	54 57 49 00                                         TWI.

0003e56d <gAvrInt_SPM_READY>:
   3e56d:	53 50 4d 20 52 45 41 44 59 00                       SPM READY.

0003e577 <gAvrInt_END>:
   3e577:	2a 00                                               *.

0003e579 <gInterruptNameTable>:
   3e579:	3f e3 45 e3 4a e3 4f e3 54 e3 59 e3 5e e3 63 e3     ?.E.J.O.T.Y.^.c.
   3e589:	68 e3 6d e3 74 e3 7b e3 82 e3 e9 e3 f6 e3 03 e4     h.m.t.{.........
   3e599:	ab e3 b7 e3 c4 e3 d1 e3 de e3 86 e3 93 e3 a0 e3     ................
   3e5a9:	48 e5 c8 e4 d2 e4 de e4 54 e5 50 e5 60 e5 0e e4     H.......T.P.`...
   3e5b9:	1a e4 27 e4 34 e4 41 e4 e8 e4 f2 e4 fe e4 69 e5     ..'.4.A.......i.
   3e5c9:	6d e5 4c e4 58 e4 65 e4 72 e4 7f e4 8a e4 96 e4     m.L.X.e.r.......
   3e5d9:	a3 e4 b0 e4 bd e4 08 e5 12 e5 1e e5 28 e5 32 e5     ............(.2.
   3e5e9:	3e e5 00                                            >..

0003e5ec <__ctors_end>:
   3e5ec:	11 24       	eor	r1, r1
   3e5ee:	1f be       	out	0x3f, r1	; 63
   3e5f0:	cf ef       	ldi	r28, 0xFF	; 255
   3e5f2:	d1 e2       	ldi	r29, 0x21	; 33
   3e5f4:	de bf       	out	0x3e, r29	; 62
   3e5f6:	cd bf       	out	0x3d, r28	; 61
   3e5f8:	01 e0       	ldi	r16, 0x01	; 1
   3e5fa:	0c bf       	out	0x3c, r16	; 60

0003e5fc <__do_copy_data>:
   3e5fc:	12 e0       	ldi	r17, 0x02	; 2
   3e5fe:	a0 e0       	ldi	r26, 0x00	; 0
   3e600:	b2 e0       	ldi	r27, 0x02	; 2
   3e602:	e2 ee       	ldi	r30, 0xE2	; 226
   3e604:	ff ef       	ldi	r31, 0xFF	; 255
   3e606:	03 e0       	ldi	r16, 0x03	; 3
   3e608:	0b bf       	out	0x3b, r16	; 59
   3e60a:	02 c0       	rjmp	.+4      	; 0x3e610 <__do_copy_data+0x14>
   3e60c:	07 90       	elpm	r0, Z+
   3e60e:	0d 92       	st	X+, r0
   3e610:	a0 30       	cpi	r26, 0x00	; 0
   3e612:	b1 07       	cpc	r27, r17
   3e614:	d9 f7       	brne	.-10     	; 0x3e60c <__do_copy_data+0x10>

0003e616 <__do_clear_bss>:
   3e616:	12 e0       	ldi	r17, 0x02	; 2
   3e618:	a0 e0       	ldi	r26, 0x00	; 0
   3e61a:	b2 e0       	ldi	r27, 0x02	; 2
   3e61c:	01 c0       	rjmp	.+2      	; 0x3e620 <.do_clear_bss_start>

0003e61e <.do_clear_bss_loop>:
   3e61e:	1d 92       	st	X+, r1

0003e620 <.do_clear_bss_start>:
   3e620:	ac 30       	cpi	r26, 0x0C	; 12
   3e622:	b1 07       	cpc	r27, r17
   3e624:	e1 f7       	brne	.-8      	; 0x3e61e <.do_clear_bss_loop>
   3e626:	0f 94 fb f4 	call	0x3e9f6	; 0x3e9f6 <main>
   3e62a:	0d 94 ef ff 	jmp	0x3ffde	; 0x3ffde <_exit>

0003e62e <__jumpMain>:
//#define	SPH_REG	0x3E
//#define	SPL_REG	0x3D

//*****************************************************************************
void __jumpMain(void)
{
   3e62e:	01 e2       	ldi	r16, 0x21	; 33

//	asm volatile ( "ldi	16, 0x10");
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
//	asm volatile ( "out 0x3E,16");
//	asm volatile ( "out %0,16" :: "i" (SPH_REG) );
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e630:	0e bf       	out	0x3e, r16	; 62

//	asm volatile ( "ldi	16, 0x00");
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e632:	0f ef       	ldi	r16, 0xFF	; 255
//	asm volatile ( "out 0x3d,16");
//	asm volatile ( "out %0,16" :: "i" (SPL_REG) );
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e634:	0d bf       	out	0x3d, r16	; 61



	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e636:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e638:	1f be       	out	0x3f, r1	; 63
//	asm volatile ( "rjmp main");											// jump to main()
	asm volatile ( "jmp main");												// jump to main()
   3e63a:	0d 94 fb f4 	jmp	0x3e9f6	; 0x3e9f6 <main>

0003e63e <__bad_interrupt>:
   3e63e:	0d 94 00 f0 	jmp	0x3e000	; 0x3e000 <__vectors>

0003e642 <delay_ms>:
}


//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
   3e642:	20 e0       	ldi	r18, 0x00	; 0
   3e644:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   3e646:	40 ed       	ldi	r20, 0xD0	; 208
   3e648:	57 e0       	ldi	r21, 0x07	; 7
   3e64a:	05 c0       	rjmp	.+10     	; 0x3e656 <delay_ms+0x14>
   3e64c:	fa 01       	movw	r30, r20
   3e64e:	31 97       	sbiw	r30, 0x01	; 1
   3e650:	f1 f7       	brne	.-4      	; 0x3e64e <delay_ms+0xc>
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3e652:	2f 5f       	subi	r18, 0xFF	; 255
   3e654:	3f 4f       	sbci	r19, 0xFF	; 255
   3e656:	28 17       	cp	r18, r24
   3e658:	39 07       	cpc	r19, r25
   3e65a:	c0 f3       	brcs	.-16     	; 0x3e64c <delay_ms+0xa>
	{
		_delay_ms(0.5);
	}
}
   3e65c:	08 95       	ret

0003e65e <PrintFromPROGMEM>:
	theChar		=	1;

	while (theChar != 0)
	{
	#if (FLASHEND > 0x10000)
		theChar	=	pgm_read_byte_far((uint32_t)dataPtr + ii);
   3e65e:	9c 01       	movw	r18, r24
   3e660:	44 27       	eor	r20, r20
   3e662:	37 fd       	sbrc	r19, 7
   3e664:	40 95       	com	r20
   3e666:	54 2f       	mov	r21, r20
   3e668:	da 01       	movw	r26, r20
   3e66a:	c9 01       	movw	r24, r18
   3e66c:	86 0f       	add	r24, r22
   3e66e:	91 1d       	adc	r25, r1
   3e670:	a1 1d       	adc	r26, r1
   3e672:	b1 1d       	adc	r27, r1
   3e674:	ab bf       	out	0x3b, r26	; 59
   3e676:	fc 01       	movw	r30, r24
   3e678:	87 91       	elpm	r24, Z+
	#else
		theChar	=	pgm_read_byte_near((uint32_t)dataPtr + ii);
	#endif
		if (theChar != 0)
   3e67a:	88 23       	and	r24, r24
   3e67c:	69 f0       	breq	.+26     	; 0x3e698 <PrintFromPROGMEM+0x3a>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e67e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e682:	80 91 c0 00 	lds	r24, 0x00C0
   3e686:	86 ff       	sbrs	r24, 6
   3e688:	fc cf       	rjmp	.-8      	; 0x3e682 <PrintFromPROGMEM+0x24>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e68a:	80 91 c0 00 	lds	r24, 0x00C0
   3e68e:	80 64       	ori	r24, 0x40	; 64
   3e690:	80 93 c0 00 	sts	0x00C0, r24
	#endif
		if (theChar != 0)
		{
			sendchar(theChar);
		}
		ii++;
   3e694:	6f 5f       	subi	r22, 0xFF	; 255
   3e696:	e8 cf       	rjmp	.-48     	; 0x3e668 <PrintFromPROGMEM+0xa>
   3e698:	08 95       	ret

0003e69a <PrintNewLine>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e69a:	8d e0       	ldi	r24, 0x0D	; 13
   3e69c:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e6a0:	80 91 c0 00 	lds	r24, 0x00C0
   3e6a4:	86 ff       	sbrs	r24, 6
   3e6a6:	fc cf       	rjmp	.-8      	; 0x3e6a0 <PrintNewLine+0x6>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e6a8:	80 91 c0 00 	lds	r24, 0x00C0
   3e6ac:	80 64       	ori	r24, 0x40	; 64
   3e6ae:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e6b2:	8a e0       	ldi	r24, 0x0A	; 10
   3e6b4:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e6b8:	80 91 c0 00 	lds	r24, 0x00C0
   3e6bc:	86 ff       	sbrs	r24, 6
   3e6be:	fc cf       	rjmp	.-8      	; 0x3e6b8 <PrintNewLine+0x1e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e6c0:	80 91 c0 00 	lds	r24, 0x00C0
   3e6c4:	80 64       	ori	r24, 0x40	; 64
   3e6c6:	80 93 c0 00 	sts	0x00C0, r24
//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
	sendchar(0x0a);
}
   3e6ca:	08 95       	ret

0003e6cc <PrintFromPROGMEMln>:


//************************************************************************
void	PrintFromPROGMEMln(void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   3e6cc:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>

	PrintNewLine();
   3e6d0:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
}
   3e6d4:	08 95       	ret

0003e6d6 <PrintString>:


//************************************************************************
void	PrintString(char *textString)
{
   3e6d6:	fc 01       	movw	r30, r24

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
	{
		theChar	=	textString[ii];
   3e6d8:	90 81       	ld	r25, Z
		if (theChar != 0)
   3e6da:	99 23       	and	r25, r25
   3e6dc:	59 f0       	breq	.+22     	; 0x3e6f4 <PrintString+0x1e>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e6de:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e6e2:	80 91 c0 00 	lds	r24, 0x00C0
   3e6e6:	86 ff       	sbrs	r24, 6
   3e6e8:	fc cf       	rjmp	.-8      	; 0x3e6e2 <PrintString+0xc>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e6ea:	80 91 c0 00 	lds	r24, 0x00C0
   3e6ee:	80 64       	ori	r24, 0x40	; 64
   3e6f0:	80 93 c0 00 	sts	0x00C0, r24
   3e6f4:	31 96       	adiw	r30, 0x01	; 1
char	theChar;
int		ii;

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
   3e6f6:	99 23       	and	r25, r25
   3e6f8:	79 f7       	brne	.-34     	; 0x3e6d8 <PrintString+0x2>
		{
			sendchar(theChar);
		}
		ii++;
	}
}
   3e6fa:	08 95       	ret

0003e6fc <PrintHexByte>:

//************************************************************************
void	PrintHexByte(unsigned char theByte)
{
   3e6fc:	28 2f       	mov	r18, r24
char	theChar;

	theChar	=	0x30 + ((theByte >> 4) & 0x0f);
   3e6fe:	98 2f       	mov	r25, r24
   3e700:	92 95       	swap	r25
   3e702:	9f 70       	andi	r25, 0x0F	; 15
   3e704:	89 2f       	mov	r24, r25
   3e706:	80 5d       	subi	r24, 0xD0	; 208
	if (theChar > 0x39)
   3e708:	8a 33       	cpi	r24, 0x3A	; 58
   3e70a:	08 f0       	brcs	.+2      	; 0x3e70e <PrintHexByte+0x12>
	{
		theChar	+=	7;
   3e70c:	89 5f       	subi	r24, 0xF9	; 249
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e70e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e712:	80 91 c0 00 	lds	r24, 0x00C0
   3e716:	86 ff       	sbrs	r24, 6
   3e718:	fc cf       	rjmp	.-8      	; 0x3e712 <PrintHexByte+0x16>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e71a:	80 91 c0 00 	lds	r24, 0x00C0
   3e71e:	80 64       	ori	r24, 0x40	; 64
   3e720:	80 93 c0 00 	sts	0x00C0, r24
	{
		theChar	+=	7;
	}
	sendchar(theChar );

	theChar	=	0x30 + (theByte & 0x0f);
   3e724:	82 2f       	mov	r24, r18
   3e726:	8f 70       	andi	r24, 0x0F	; 15
   3e728:	98 2f       	mov	r25, r24
   3e72a:	90 5d       	subi	r25, 0xD0	; 208
	if (theChar > 0x39)
   3e72c:	9a 33       	cpi	r25, 0x3A	; 58
   3e72e:	08 f0       	brcs	.+2      	; 0x3e732 <PrintHexByte+0x36>
	{
		theChar	+=	7;
   3e730:	99 5f       	subi	r25, 0xF9	; 249
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e732:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e736:	80 91 c0 00 	lds	r24, 0x00C0
   3e73a:	86 ff       	sbrs	r24, 6
   3e73c:	fc cf       	rjmp	.-8      	; 0x3e736 <PrintHexByte+0x3a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e73e:	80 91 c0 00 	lds	r24, 0x00C0
   3e742:	80 64       	ori	r24, 0x40	; 64
   3e744:	80 93 c0 00 	sts	0x00C0, r24
	if (theChar > 0x39)
	{
		theChar	+=	7;
	}
	sendchar(theChar );
}
   3e748:	08 95       	ret

0003e74a <PrintDecInt>:

//************************************************************************
void	PrintDecInt(int theNumber, int digitCnt)
{
   3e74a:	9c 01       	movw	r18, r24
   3e74c:	fb 01       	movw	r30, r22
int	theChar;
int	myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   3e74e:	85 36       	cpi	r24, 0x65	; 101
   3e750:	91 05       	cpc	r25, r1
   3e752:	1c f4       	brge	.+6      	; 0x3e75a <PrintDecInt+0x10>
   3e754:	63 30       	cpi	r22, 0x03	; 3
   3e756:	71 05       	cpc	r23, r1
   3e758:	94 f0       	brlt	.+36     	; 0x3e77e <PrintDecInt+0x34>
	{
		theChar		=	0x30 + myNumber / 100;
		sendchar(theChar );
   3e75a:	c9 01       	movw	r24, r18
   3e75c:	64 e6       	ldi	r22, 0x64	; 100
   3e75e:	70 e0       	ldi	r23, 0x00	; 0
   3e760:	0f 94 90 ff 	call	0x3ff20	; 0x3ff20 <__divmodhi4>
   3e764:	60 5d       	subi	r22, 0xD0	; 208
   3e766:	7f 4f       	sbci	r23, 0xFF	; 255
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e768:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e76c:	80 91 c0 00 	lds	r24, 0x00C0
   3e770:	86 ff       	sbrs	r24, 6
   3e772:	fc cf       	rjmp	.-8      	; 0x3e76c <PrintDecInt+0x22>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e774:	80 91 c0 00 	lds	r24, 0x00C0
   3e778:	80 64       	ori	r24, 0x40	; 64
   3e77a:	80 93 c0 00 	sts	0x00C0, r24
	{
		theChar		=	0x30 + myNumber / 100;
		sendchar(theChar );
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   3e77e:	2b 30       	cpi	r18, 0x0B	; 11
   3e780:	31 05       	cpc	r19, r1
   3e782:	14 f4       	brge	.+4      	; 0x3e788 <PrintDecInt+0x3e>
   3e784:	32 97       	sbiw	r30, 0x02	; 2
   3e786:	b4 f0       	brlt	.+44     	; 0x3e7b4 <PrintDecInt+0x6a>
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
   3e788:	c9 01       	movw	r24, r18
   3e78a:	64 e6       	ldi	r22, 0x64	; 100
   3e78c:	70 e0       	ldi	r23, 0x00	; 0
   3e78e:	0f 94 90 ff 	call	0x3ff20	; 0x3ff20 <__divmodhi4>
   3e792:	6a e0       	ldi	r22, 0x0A	; 10
   3e794:	70 e0       	ldi	r23, 0x00	; 0
   3e796:	0f 94 90 ff 	call	0x3ff20	; 0x3ff20 <__divmodhi4>
   3e79a:	60 5d       	subi	r22, 0xD0	; 208
   3e79c:	7f 4f       	sbci	r23, 0xFF	; 255
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e79e:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e7a2:	80 91 c0 00 	lds	r24, 0x00C0
   3e7a6:	86 ff       	sbrs	r24, 6
   3e7a8:	fc cf       	rjmp	.-8      	; 0x3e7a2 <PrintDecInt+0x58>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e7aa:	80 91 c0 00 	lds	r24, 0x00C0
   3e7ae:	80 64       	ori	r24, 0x40	; 64
   3e7b0:	80 93 c0 00 	sts	0x00C0, r24
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
	}
	theChar	=	0x30 + (myNumber % 10);
	sendchar(theChar );
   3e7b4:	c9 01       	movw	r24, r18
   3e7b6:	6a e0       	ldi	r22, 0x0A	; 10
   3e7b8:	70 e0       	ldi	r23, 0x00	; 0
   3e7ba:	0f 94 90 ff 	call	0x3ff20	; 0x3ff20 <__divmodhi4>
   3e7be:	c0 96       	adiw	r24, 0x30	; 48
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e7c0:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e7c4:	80 91 c0 00 	lds	r24, 0x00C0
   3e7c8:	86 ff       	sbrs	r24, 6
   3e7ca:	fc cf       	rjmp	.-8      	; 0x3e7c4 <PrintDecInt+0x7a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e7cc:	80 91 c0 00 	lds	r24, 0x00C0
   3e7d0:	80 64       	ori	r24, 0x40	; 64
   3e7d2:	80 93 c0 00 	sts	0x00C0, r24
		theChar	=	0x30  + ((myNumber % 100) / 10 );
		sendchar(theChar );
	}
	theChar	=	0x30 + (myNumber % 10);
	sendchar(theChar );
}
   3e7d6:	08 95       	ret

0003e7d8 <analogRead>:

	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
//	ADMUX	=	(analog_reference << 6) | (pin & 0x07);
	ADMUX	=	(1 << 6) | (pin & 0x07);
   3e7d8:	28 2f       	mov	r18, r24
   3e7da:	27 70       	andi	r18, 0x07	; 7
   3e7dc:	20 64       	ori	r18, 0x40	; 64
   3e7de:	20 93 7c 00 	sts	0x007C, r18

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB	=	(ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
   3e7e2:	20 91 7b 00 	lds	r18, 0x007B
   3e7e6:	86 95       	lsr	r24
   3e7e8:	86 95       	lsr	r24
   3e7ea:	86 95       	lsr	r24
   3e7ec:	90 e0       	ldi	r25, 0x00	; 0
   3e7ee:	81 70       	andi	r24, 0x01	; 1
   3e7f0:	90 70       	andi	r25, 0x00	; 0
   3e7f2:	33 e0       	ldi	r19, 0x03	; 3
   3e7f4:	88 0f       	add	r24, r24
   3e7f6:	99 1f       	adc	r25, r25
   3e7f8:	3a 95       	dec	r19
   3e7fa:	e1 f7       	brne	.-8      	; 0x3e7f4 <analogRead+0x1c>
   3e7fc:	27 7f       	andi	r18, 0xF7	; 247
   3e7fe:	28 2b       	or	r18, r24
   3e800:	20 93 7b 00 	sts	0x007B, r18

	// without a delay, we seem to read from the wrong channel
	//delay(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
   3e804:	80 91 7a 00 	lds	r24, 0x007A
   3e808:	80 64       	ori	r24, 0x40	; 64
   3e80a:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
   3e80e:	80 91 7a 00 	lds	r24, 0x007A
   3e812:	86 fd       	sbrc	r24, 6
   3e814:	fc cf       	rjmp	.-8      	; 0x3e80e <analogRead+0x36>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low		=	ADCL;
   3e816:	20 91 78 00 	lds	r18, 0x0078
	high	=	ADCH;
   3e81a:	40 91 79 00 	lds	r20, 0x0079
   3e81e:	94 2f       	mov	r25, r20
   3e820:	80 e0       	ldi	r24, 0x00	; 0
   3e822:	30 e0       	ldi	r19, 0x00	; 0
   3e824:	28 2b       	or	r18, r24
   3e826:	39 2b       	or	r19, r25

	// combine the two bytes
	return (high << 8) | low;
}
   3e828:	c9 01       	movw	r24, r18
   3e82a:	08 95       	ret

0003e82c <PrintAvailablePort>:
	}
}

//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
   3e82c:	1f 93       	push	r17
   3e82e:	18 2f       	mov	r17, r24
	PrintFromPROGMEM(gTextMsg_PORT, 0);
   3e830:	80 e8       	ldi	r24, 0x80	; 128
   3e832:	92 ee       	ldi	r25, 0xE2	; 226
   3e834:	60 e0       	ldi	r22, 0x00	; 0
   3e836:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e83a:	10 93 c6 00 	sts	0x00C6, r17
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e83e:	80 91 c0 00 	lds	r24, 0x00C0
   3e842:	86 ff       	sbrs	r24, 6
   3e844:	fc cf       	rjmp	.-8      	; 0x3e83e <PrintAvailablePort+0x12>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e846:	80 91 c0 00 	lds	r24, 0x00C0
   3e84a:	80 64       	ori	r24, 0x40	; 64
   3e84c:	80 93 c0 00 	sts	0x00C0, r24
//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
	PrintFromPROGMEM(gTextMsg_PORT, 0);
	sendchar(thePortLetter);
	PrintNewLine();
   3e850:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
}
   3e854:	1f 91       	pop	r17
   3e856:	08 95       	ret

0003e858 <DumpHex>:
	kDUMP_RAM
};

//************************************************************************
static void	DumpHex(unsigned char dumpWhat, unsigned long startAddress, unsigned char numRows)
{
   3e858:	2f 92       	push	r2
   3e85a:	3f 92       	push	r3
   3e85c:	4f 92       	push	r4
   3e85e:	5f 92       	push	r5
   3e860:	6f 92       	push	r6
   3e862:	7f 92       	push	r7
   3e864:	8f 92       	push	r8
   3e866:	9f 92       	push	r9
   3e868:	af 92       	push	r10
   3e86a:	bf 92       	push	r11
   3e86c:	cf 92       	push	r12
   3e86e:	df 92       	push	r13
   3e870:	ef 92       	push	r14
   3e872:	ff 92       	push	r15
   3e874:	0f 93       	push	r16
   3e876:	1f 93       	push	r17
   3e878:	df 93       	push	r29
   3e87a:	cf 93       	push	r28
   3e87c:	cd b7       	in	r28, 0x3d	; 61
   3e87e:	de b7       	in	r29, 0x3e	; 62
   3e880:	62 97       	sbiw	r28, 0x12	; 18
   3e882:	0f b6       	in	r0, 0x3f	; 63
   3e884:	f8 94       	cli
   3e886:	de bf       	out	0x3e, r29	; 62
   3e888:	0f be       	out	0x3f, r0	; 63
   3e88a:	cd bf       	out	0x3d, r28	; 61
   3e88c:	38 2e       	mov	r3, r24
   3e88e:	62 2e       	mov	r6, r18
   3e890:	ca 01       	movw	r24, r20
   3e892:	db 01       	movw	r26, r22
   3e894:	5c 01       	movw	r10, r24
   3e896:	6d 01       	movw	r12, r26
   3e898:	77 24       	eor	r7, r7
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e89a:	60 e2       	ldi	r22, 0x20	; 32
   3e89c:	26 2e       	mov	r2, r22
   3e89e:	2e 01       	movw	r4, r28
   3e8a0:	08 94       	sec
   3e8a2:	41 1c       	adc	r4, r1
   3e8a4:	51 1c       	adc	r5, r1
   3e8a6:	8b c0       	rjmp	.+278    	; 0x3e9be <DumpHex+0x166>
	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
	{
		if (myAddressPointer > 0x10000)
   3e8a8:	81 e0       	ldi	r24, 0x01	; 1
   3e8aa:	a8 16       	cp	r10, r24
   3e8ac:	80 e0       	ldi	r24, 0x00	; 0
   3e8ae:	b8 06       	cpc	r11, r24
   3e8b0:	81 e0       	ldi	r24, 0x01	; 1
   3e8b2:	c8 06       	cpc	r12, r24
   3e8b4:	80 e0       	ldi	r24, 0x00	; 0
   3e8b6:	d8 06       	cpc	r13, r24
   3e8b8:	28 f0       	brcs	.+10     	; 0x3e8c4 <DumpHex+0x6c>
		{
			PrintHexByte((myAddressPointer >> 16) & 0x00ff);
   3e8ba:	c6 01       	movw	r24, r12
   3e8bc:	aa 27       	eor	r26, r26
   3e8be:	bb 27       	eor	r27, r27
   3e8c0:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
		}
		PrintHexByte((myAddressPointer >> 8) & 0x00ff);
   3e8c4:	bb 27       	eor	r27, r27
   3e8c6:	ad 2d       	mov	r26, r13
   3e8c8:	9c 2d       	mov	r25, r12
   3e8ca:	8b 2d       	mov	r24, r11
   3e8cc:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
		PrintHexByte(myAddressPointer & 0x00ff);
   3e8d0:	8a 2d       	mov	r24, r10
   3e8d2:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e8d6:	20 92 c6 00 	sts	0x00C6, r2
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e8da:	80 91 c0 00 	lds	r24, 0x00C0
   3e8de:	86 ff       	sbrs	r24, 6
   3e8e0:	fc cf       	rjmp	.-8      	; 0x3e8da <DumpHex+0x82>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e8e2:	80 91 c0 00 	lds	r24, 0x00C0
   3e8e6:	80 64       	ori	r24, 0x40	; 64
   3e8e8:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e8ec:	9d e2       	ldi	r25, 0x2D	; 45
   3e8ee:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e8f2:	80 91 c0 00 	lds	r24, 0x00C0
   3e8f6:	86 ff       	sbrs	r24, 6
   3e8f8:	fc cf       	rjmp	.-8      	; 0x3e8f2 <DumpHex+0x9a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e8fa:	80 91 c0 00 	lds	r24, 0x00C0
   3e8fe:	80 64       	ori	r24, 0x40	; 64
   3e900:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e904:	20 92 c6 00 	sts	0x00C6, r2
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e908:	80 91 c0 00 	lds	r24, 0x00C0
   3e90c:	86 ff       	sbrs	r24, 6
   3e90e:	fc cf       	rjmp	.-8      	; 0x3e908 <DumpHex+0xb0>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e910:	80 91 c0 00 	lds	r24, 0x00C0
   3e914:	80 64       	ori	r24, 0x40	; 64
   3e916:	80 93 c0 00 	sts	0x00C0, r24
		PrintHexByte(myAddressPointer & 0x00ff);
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
   3e91a:	19 82       	std	Y+1, r1	; 0x01
   3e91c:	86 01       	movw	r16, r12
   3e91e:	75 01       	movw	r14, r10
   3e920:	88 24       	eor	r8, r8
   3e922:	99 24       	eor	r9, r9
		for (ii=0; ii<16; ii++)
		{
			switch(dumpWhat)
   3e924:	a1 e0       	ldi	r26, 0x01	; 1
   3e926:	3a 16       	cp	r3, r26
   3e928:	51 f0       	breq	.+20     	; 0x3e93e <DumpHex+0xe6>
   3e92a:	3a 16       	cp	r3, r26
   3e92c:	20 f0       	brcs	.+8      	; 0x3e936 <DumpHex+0xde>
   3e92e:	b2 e0       	ldi	r27, 0x02	; 2
   3e930:	3b 16       	cp	r3, r27
   3e932:	61 f4       	brne	.+24     	; 0x3e94c <DumpHex+0xf4>
   3e934:	09 c0       	rjmp	.+18     	; 0x3e948 <DumpHex+0xf0>
			{
				case kDUMP_FLASH:
				#if (FLASHEND > 0x10000)
					theValue	=	pgm_read_byte_far(myAddressPointer);
   3e936:	0b bf       	out	0x3b, r16	; 59
   3e938:	f7 01       	movw	r30, r14
   3e93a:	77 90       	elpm	r7, Z+
   3e93c:	07 c0       	rjmp	.+14     	; 0x3e94c <DumpHex+0xf4>
					theValue	=	pgm_read_byte_near(myAddressPointer);
				#endif
					break;

				case kDUMP_EEPROM:
					theValue	=	eeprom_read_byte((void *)myAddressPointer);
   3e93e:	c7 01       	movw	r24, r14
   3e940:	0f 94 d9 ff 	call	0x3ffb2	; 0x3ffb2 <__eerd_byte_m2560>
   3e944:	78 2e       	mov	r7, r24
   3e946:	02 c0       	rjmp	.+4      	; 0x3e94c <DumpHex+0xf4>
					break;

				case kDUMP_RAM:
					theValue	=	ramPtr[myAddressPointer];
   3e948:	f7 01       	movw	r30, r14
   3e94a:	70 80       	ld	r7, Z
					break;

			}
			PrintHexByte(theValue);
   3e94c:	87 2d       	mov	r24, r7
   3e94e:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e952:	20 92 c6 00 	sts	0x00C6, r2
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e956:	80 91 c0 00 	lds	r24, 0x00C0
   3e95a:	86 ff       	sbrs	r24, 6
   3e95c:	fc cf       	rjmp	.-8      	; 0x3e956 <DumpHex+0xfe>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e95e:	80 91 c0 00 	lds	r24, 0x00C0
   3e962:	80 64       	ori	r24, 0x40	; 64
   3e964:	80 93 c0 00 	sts	0x00C0, r24
					break;

			}
			PrintHexByte(theValue);
			sendchar(0x20);
			if ((theValue >= 0x20) && (theValue < 0x7f))
   3e968:	87 2d       	mov	r24, r7
   3e96a:	80 52       	subi	r24, 0x20	; 32
   3e96c:	f4 01       	movw	r30, r8
   3e96e:	ef 70       	andi	r30, 0x0F	; 15
   3e970:	f0 70       	andi	r31, 0x00	; 0
   3e972:	8f 35       	cpi	r24, 0x5F	; 95
   3e974:	20 f4       	brcc	.+8      	; 0x3e97e <DumpHex+0x126>
			{
				asciiDump[ii % 16]	=	theValue;
   3e976:	e4 0d       	add	r30, r4
   3e978:	f5 1d       	adc	r31, r5
   3e97a:	70 82       	st	Z, r7
   3e97c:	04 c0       	rjmp	.+8      	; 0x3e986 <DumpHex+0x12e>
			}
			else
			{
				asciiDump[ii % 16]	=	'.';
   3e97e:	e4 0d       	add	r30, r4
   3e980:	f5 1d       	adc	r31, r5
   3e982:	8e e2       	ldi	r24, 0x2E	; 46
   3e984:	80 83       	st	Z, r24
			}

			myAddressPointer++;
   3e986:	08 94       	sec
   3e988:	e1 1c       	adc	r14, r1
   3e98a:	f1 1c       	adc	r15, r1
   3e98c:	01 1d       	adc	r16, r1
   3e98e:	11 1d       	adc	r17, r1
   3e990:	08 94       	sec
   3e992:	81 1c       	adc	r8, r1
   3e994:	91 1c       	adc	r9, r1
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
		for (ii=0; ii<16; ii++)
   3e996:	90 e1       	ldi	r25, 0x10	; 16
   3e998:	89 16       	cp	r8, r25
   3e99a:	91 04       	cpc	r9, r1
   3e99c:	09 f0       	breq	.+2      	; 0x3e9a0 <DumpHex+0x148>
   3e99e:	c2 cf       	rjmp	.-124    	; 0x3e924 <DumpHex+0xcc>
   3e9a0:	80 e1       	ldi	r24, 0x10	; 16
   3e9a2:	90 e0       	ldi	r25, 0x00	; 0
   3e9a4:	a0 e0       	ldi	r26, 0x00	; 0
   3e9a6:	b0 e0       	ldi	r27, 0x00	; 0
   3e9a8:	a8 0e       	add	r10, r24
   3e9aa:	b9 1e       	adc	r11, r25
   3e9ac:	ca 1e       	adc	r12, r26
   3e9ae:	db 1e       	adc	r13, r27
				asciiDump[ii % 16]	=	'.';
			}

			myAddressPointer++;
		}
		asciiDump[16]	=	0;
   3e9b0:	19 8a       	std	Y+17, r1	; 0x11
		PrintString(asciiDump);
   3e9b2:	c2 01       	movw	r24, r4
   3e9b4:	0f 94 6b f3 	call	0x3e6d6	; 0x3e6d6 <PrintString>
		PrintNewLine();
   3e9b8:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>

		numRows--;
   3e9bc:	6a 94       	dec	r6


	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
   3e9be:	66 20       	and	r6, r6
   3e9c0:	09 f0       	breq	.+2      	; 0x3e9c4 <DumpHex+0x16c>
   3e9c2:	72 cf       	rjmp	.-284    	; 0x3e8a8 <DumpHex+0x50>
		PrintString(asciiDump);
		PrintNewLine();

		numRows--;
	}
}
   3e9c4:	62 96       	adiw	r28, 0x12	; 18
   3e9c6:	0f b6       	in	r0, 0x3f	; 63
   3e9c8:	f8 94       	cli
   3e9ca:	de bf       	out	0x3e, r29	; 62
   3e9cc:	0f be       	out	0x3f, r0	; 63
   3e9ce:	cd bf       	out	0x3d, r28	; 61
   3e9d0:	cf 91       	pop	r28
   3e9d2:	df 91       	pop	r29
   3e9d4:	1f 91       	pop	r17
   3e9d6:	0f 91       	pop	r16
   3e9d8:	ff 90       	pop	r15
   3e9da:	ef 90       	pop	r14
   3e9dc:	df 90       	pop	r13
   3e9de:	cf 90       	pop	r12
   3e9e0:	bf 90       	pop	r11
   3e9e2:	af 90       	pop	r10
   3e9e4:	9f 90       	pop	r9
   3e9e6:	8f 90       	pop	r8
   3e9e8:	7f 90       	pop	r7
   3e9ea:	6f 90       	pop	r6
   3e9ec:	5f 90       	pop	r5
   3e9ee:	4f 90       	pop	r4
   3e9f0:	3f 90       	pop	r3
   3e9f2:	2f 90       	pop	r2
   3e9f4:	08 95       	ret

0003e9f6 <main>:



//*****************************************************************************
int main(void)
{
   3e9f6:	2f 92       	push	r2
   3e9f8:	3f 92       	push	r3
   3e9fa:	4f 92       	push	r4
   3e9fc:	5f 92       	push	r5
   3e9fe:	6f 92       	push	r6
   3ea00:	7f 92       	push	r7
   3ea02:	8f 92       	push	r8
   3ea04:	9f 92       	push	r9
   3ea06:	af 92       	push	r10
   3ea08:	bf 92       	push	r11
   3ea0a:	cf 92       	push	r12
   3ea0c:	df 92       	push	r13
   3ea0e:	ef 92       	push	r14
   3ea10:	ff 92       	push	r15
   3ea12:	0f 93       	push	r16
   3ea14:	1f 93       	push	r17
   3ea16:	df 93       	push	r29
   3ea18:	cf 93       	push	r28
   3ea1a:	cd b7       	in	r28, 0x3d	; 61
   3ea1c:	de b7       	in	r29, 0x3e	; 62
   3ea1e:	cd 53       	subi	r28, 0x3D	; 61
   3ea20:	d1 40       	sbci	r29, 0x01	; 1
   3ea22:	0f b6       	in	r0, 0x3f	; 63
   3ea24:	f8 94       	cli
   3ea26:	de bf       	out	0x3e, r29	; 62
   3ea28:	0f be       	out	0x3f, r0	; 63
   3ea2a:	cd bf       	out	0x3d, r28	; 61
	 * Branch to bootloader or application code ?
	 */

#ifndef REMOVE_BOOTLOADER_LED
	/* PROG_PIN pulled low, indicate with LED that bootloader is active */
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3ea2c:	27 9a       	sbi	0x04, 7	; 4
//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3ea2e:	2f 9a       	sbi	0x05, 7	; 5
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3ea30:	80 91 c0 00 	lds	r24, 0x00C0
   3ea34:	82 60       	ori	r24, 0x02	; 2
   3ea36:	80 93 c0 00 	sts	0x00C0, r24
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3ea3a:	80 e1       	ldi	r24, 0x10	; 16
   3ea3c:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3ea40:	88 e1       	ldi	r24, 0x18	; 24
   3ea42:	80 93 c1 00 	sts	0x00C1, r24

	asm volatile ("nop");			// wait until port has changed
   3ea46:	00 00       	nop
   3ea48:	ee 24       	eor	r14, r14
   3ea4a:	ff 24       	eor	r15, r15
   3ea4c:	87 01       	movw	r16, r14
   3ea4e:	84 e0       	ldi	r24, 0x04	; 4
   3ea50:	a8 2e       	mov	r10, r24
   3ea52:	b1 2c       	mov	r11, r1
	sendchar(0x0a);

	delay_ms(100);
#endif

	while (boot_state==0)
   3ea54:	cc 24       	eor	r12, r12
   3ea56:	dd 24       	eor	r13, r13
   3ea58:	24 c0       	rjmp	.+72     	; 0x3eaa2 <main+0xac>
   3ea5a:	c5 01       	movw	r24, r10
   3ea5c:	01 97       	sbiw	r24, 0x01	; 1
   3ea5e:	f1 f7       	brne	.-4      	; 0x3ea5c <main+0x66>
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
		{
			_delay_ms(0.001);
			boot_timer++;
   3ea60:	08 94       	sec
   3ea62:	e1 1c       	adc	r14, r1
   3ea64:	f1 1c       	adc	r15, r1
   3ea66:	01 1d       	adc	r16, r1
   3ea68:	11 1d       	adc	r17, r1
   3ea6a:	21 e9       	ldi	r18, 0x91	; 145
   3ea6c:	e2 16       	cp	r14, r18
   3ea6e:	2f e5       	ldi	r18, 0x5F	; 95
   3ea70:	f2 06       	cpc	r15, r18
   3ea72:	21 e0       	ldi	r18, 0x01	; 1
   3ea74:	02 07       	cpc	r16, r18
   3ea76:	20 e0       	ldi	r18, 0x00	; 0
   3ea78:	12 07       	cpc	r17, r18
   3ea7a:	18 f0       	brcs	.+6      	; 0x3ea82 <main+0x8c>
   3ea7c:	b1 e0       	ldi	r27, 0x01	; 1
   3ea7e:	cb 2e       	mov	r12, r27
   3ea80:	d1 2c       	mov	r13, r1
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % 7000) == 0)
   3ea82:	c8 01       	movw	r24, r16
   3ea84:	b7 01       	movw	r22, r14
   3ea86:	28 e5       	ldi	r18, 0x58	; 88
   3ea88:	3b e1       	ldi	r19, 0x1B	; 27
   3ea8a:	40 e0       	ldi	r20, 0x00	; 0
   3ea8c:	50 e0       	ldi	r21, 0x00	; 0
   3ea8e:	0f 94 a3 ff 	call	0x3ff46	; 0x3ff46 <__udivmodsi4>
   3ea92:	61 15       	cp	r22, r1
   3ea94:	71 05       	cpc	r23, r1
   3ea96:	81 05       	cpc	r24, r1
   3ea98:	91 05       	cpc	r25, r1
   3ea9a:	19 f4       	brne	.+6      	; 0x3eaa2 <main+0xac>
			{
				//*	toggle the LED
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3ea9c:	85 b1       	in	r24, 0x05	; 5
   3ea9e:	80 58       	subi	r24, 0x80	; 128
   3eaa0:	85 b9       	out	0x05, r24	; 5


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3eaa2:	80 91 c0 00 	lds	r24, 0x00C0
	delay_ms(100);
#endif

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3eaa6:	87 fd       	sbrc	r24, 7
   3eaa8:	03 c0       	rjmp	.+6      	; 0x3eab0 <main+0xba>
   3eaaa:	c1 14       	cp	r12, r1
   3eaac:	d1 04       	cpc	r13, r1
   3eaae:	a9 f2       	breq	.-86     	; 0x3ea5a <main+0x64>
	sendchar(0x0a);

	delay_ms(100);
#endif

	while (boot_state==0)
   3eab0:	a6 01       	movw	r20, r12
   3eab2:	4f 5f       	subi	r20, 0xFF	; 255
   3eab4:	5f 4f       	sbci	r21, 0xFF	; 255
   3eab6:	c2 5e       	subi	r28, 0xE2	; 226
   3eab8:	de 4f       	sbci	r29, 0xFE	; 254
   3eaba:	59 83       	std	Y+1, r21	; 0x01
   3eabc:	48 83       	st	Y, r20
   3eabe:	ce 51       	subi	r28, 0x1E	; 30
   3eac0:	d1 40       	sbci	r29, 0x01	; 1
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   3eac2:	c2 5e       	subi	r28, 0xE2	; 226
   3eac4:	de 4f       	sbci	r29, 0xFE	; 254
   3eac6:	68 81       	ld	r22, Y
   3eac8:	79 81       	ldd	r23, Y+1	; 0x01
   3eaca:	ce 51       	subi	r28, 0x1E	; 30
   3eacc:	d1 40       	sbci	r29, 0x01	; 1
   3eace:	61 30       	cpi	r22, 0x01	; 1
   3ead0:	71 05       	cpc	r23, r1
   3ead2:	11 f0       	breq	.+4      	; 0x3ead8 <main+0xe2>
   3ead4:	0d 94 72 ff 	jmp	0x3fee4	; 0x3fee4 <main+0x14ee>
   3ead8:	c0 5d       	subi	r28, 0xD0	; 208
   3eada:	de 4f       	sbci	r29, 0xFE	; 254
   3eadc:	19 82       	std	Y+1, r1	; 0x01
   3eade:	18 82       	st	Y, r1
   3eae0:	c0 53       	subi	r28, 0x30	; 48
   3eae2:	d1 40       	sbci	r29, 0x01	; 1
   3eae4:	60 e0       	ldi	r22, 0x00	; 0
   3eae6:	c1 5d       	subi	r28, 0xD1	; 209
   3eae8:	de 4f       	sbci	r29, 0xFE	; 254
   3eaea:	18 82       	st	Y, r1
   3eaec:	cf 52       	subi	r28, 0x2F	; 47
   3eaee:	d1 40       	sbci	r29, 0x01	; 1
   3eaf0:	aa 24       	eor	r10, r10
   3eaf2:	bb 24       	eor	r11, r11
   3eaf4:	c0 5e       	subi	r28, 0xE0	; 224
   3eaf6:	de 4f       	sbci	r29, 0xFE	; 254
   3eaf8:	18 82       	st	Y, r1
   3eafa:	19 82       	std	Y+1, r1	; 0x01
   3eafc:	1a 82       	std	Y+2, r1	; 0x02
   3eafe:	1b 82       	std	Y+3, r1	; 0x03
   3eb00:	c0 52       	subi	r28, 0x20	; 32
   3eb02:	d1 40       	sbci	r29, 0x01	; 1
   3eb04:	ce 5c       	subi	r28, 0xCE	; 206
   3eb06:	de 4f       	sbci	r29, 0xFE	; 254
   3eb08:	18 82       	st	Y, r1
   3eb0a:	19 82       	std	Y+1, r1	; 0x01
   3eb0c:	1a 82       	std	Y+2, r1	; 0x02
   3eb0e:	1b 82       	std	Y+3, r1	; 0x03
   3eb10:	c2 53       	subi	r28, 0x32	; 50
   3eb12:	d1 40       	sbci	r29, 0x01	; 1
		count++;
		if (count > MAX_TIME_COUNT)
		{
		unsigned int	data;
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3eb14:	80 e0       	ldi	r24, 0x00	; 0
   3eb16:	90 e0       	ldi	r25, 0x00	; 0
   3eb18:	a0 e0       	ldi	r26, 0x00	; 0
   3eb1a:	b0 e0       	ldi	r27, 0x00	; 0
   3eb1c:	ab bf       	out	0x3b, r26	; 59
   3eb1e:	fc 01       	movw	r30, r24
   3eb20:	a7 91       	elpm	r26, Z+
   3eb22:	b6 91       	elpm	r27, Z+
   3eb24:	c4 5c       	subi	r28, 0xC4	; 196
   3eb26:	de 4f       	sbci	r29, 0xFE	; 254
   3eb28:	b9 83       	std	Y+1, r27	; 0x01
   3eb2a:	a8 83       	st	Y, r26
   3eb2c:	cc 53       	subi	r28, 0x3C	; 60
   3eb2e:	d1 40       	sbci	r29, 0x01	; 1
   3eb30:	0d 94 6d ff 	jmp	0x3feda	; 0x3feda <main+0x14e4>
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   3eb34:	c2 5e       	subi	r28, 0xE2	; 226
   3eb36:	de 4f       	sbci	r29, 0xFE	; 254
   3eb38:	e8 81       	ld	r30, Y
   3eb3a:	f9 81       	ldd	r31, Y+1	; 0x01
   3eb3c:	ce 51       	subi	r28, 0x1E	; 30
   3eb3e:	d1 40       	sbci	r29, 0x01	; 1
   3eb40:	31 97       	sbiw	r30, 0x01	; 1
   3eb42:	09 f5       	brne	.+66     	; 0x3eb86 <main+0x190>
				{
					boot_state	=	0;
					c			=	UART_DATA_REG;
   3eb44:	20 91 c6 00 	lds	r18, 0x00C6
   3eb48:	c2 5e       	subi	r28, 0xE2	; 226
   3eb4a:	de 4f       	sbci	r29, 0xFE	; 254
   3eb4c:	19 82       	std	Y+1, r1	; 0x01
   3eb4e:	18 82       	st	Y, r1
   3eb50:	ce 51       	subi	r28, 0x1E	; 30
   3eb52:	d1 40       	sbci	r29, 0x01	; 1
   3eb54:	22 c0       	rjmp	.+68     	; 0x3eb9a <main+0x1a4>
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
	{
		// wait for data
		count++;
   3eb56:	2f 5f       	subi	r18, 0xFF	; 255
   3eb58:	3f 4f       	sbci	r19, 0xFF	; 255
   3eb5a:	4f 4f       	sbci	r20, 0xFF	; 255
   3eb5c:	5f 4f       	sbci	r21, 0xFF	; 255
		if (count > MAX_TIME_COUNT)
   3eb5e:	21 30       	cpi	r18, 0x01	; 1
   3eb60:	f2 e1       	ldi	r31, 0x12	; 18
   3eb62:	3f 07       	cpc	r19, r31
   3eb64:	fa e7       	ldi	r31, 0x7A	; 122
   3eb66:	4f 07       	cpc	r20, r31
   3eb68:	f0 e0       	ldi	r31, 0x00	; 0
   3eb6a:	5f 07       	cpc	r21, r31
   3eb6c:	80 f0       	brcs	.+32     	; 0x3eb8e <main+0x198>
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3eb6e:	c4 5c       	subi	r28, 0xC4	; 196
   3eb70:	de 4f       	sbci	r29, 0xFE	; 254
   3eb72:	08 81       	ld	r16, Y
   3eb74:	19 81       	ldd	r17, Y+1	; 0x01
   3eb76:	cc 53       	subi	r28, 0x3C	; 60
   3eb78:	d1 40       	sbci	r29, 0x01	; 1
   3eb7a:	0f 5f       	subi	r16, 0xFF	; 255
   3eb7c:	1f 4f       	sbci	r17, 0xFF	; 255
   3eb7e:	19 f0       	breq	.+6      	; 0x3eb86 <main+0x190>
			{
				asm volatile(
   3eb80:	ee 27       	eor	r30, r30
   3eb82:	ff 27       	eor	r31, r31
   3eb84:	09 94       	ijmp
   3eb86:	20 e0       	ldi	r18, 0x00	; 0
   3eb88:	30 e0       	ldi	r19, 0x00	; 0
   3eb8a:	40 e0       	ldi	r20, 0x00	; 0
   3eb8c:	50 e0       	ldi	r21, 0x00	; 0
//*****************************************************************************
static unsigned char recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3eb8e:	80 91 c0 00 	lds	r24, 0x00C0
   3eb92:	87 ff       	sbrs	r24, 7
   3eb94:	e0 cf       	rjmp	.-64     	; 0x3eb56 <main+0x160>
						);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   3eb96:	20 91 c6 00 	lds	r18, 0x00C6
				//	c	=	recchar();
					c	=	recchar_timeout();
				}

			#ifdef ENABLE_MONITOR
				if (c == '!')
   3eb9a:	21 32       	cpi	r18, 0x21	; 33
   3eb9c:	09 f0       	breq	.+2      	; 0x3eba0 <main+0x1aa>
   3eb9e:	98 c6       	rjmp	.+3376   	; 0x3f8d0 <main+0xeda>
				{
					exPointCntr++;
   3eba0:	08 94       	sec
   3eba2:	a1 1c       	adc	r10, r1
   3eba4:	b1 1c       	adc	r11, r1
					if (exPointCntr == 3)
   3eba6:	33 e0       	ldi	r19, 0x03	; 3
   3eba8:	a3 16       	cp	r10, r19
   3ebaa:	b1 04       	cpc	r11, r1
   3ebac:	09 f0       	breq	.+2      	; 0x3ebb0 <main+0x1ba>
   3ebae:	92 c6       	rjmp	.+3364   	; 0x3f8d4 <main+0xede>
   3ebb0:	00 e0       	ldi	r16, 0x00	; 0
   3ebb2:	10 e0       	ldi	r17, 0x00	; 0
   3ebb4:	18 c0       	rjmp	.+48     	; 0x3ebe6 <main+0x1f0>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3ebb6:	41 e2       	ldi	r20, 0x21	; 33
   3ebb8:	40 93 c6 00 	sts	0x00C6, r20
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3ebbc:	80 91 c0 00 	lds	r24, 0x00C0
   3ebc0:	86 ff       	sbrs	r24, 6
   3ebc2:	fc cf       	rjmp	.-8      	; 0x3ebbc <main+0x1c6>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3ebc4:	80 91 c0 00 	lds	r24, 0x00C0
   3ebc8:	80 64       	ori	r24, 0x40	; 64
   3ebca:	80 93 c0 00 	sts	0x00C0, r24
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
	{
		for (jj=0; jj<25; jj++)
   3ebce:	2f 5f       	subi	r18, 0xFF	; 255
   3ebd0:	3f 4f       	sbci	r19, 0xFF	; 255
   3ebd2:	29 31       	cpi	r18, 0x19	; 25
   3ebd4:	31 05       	cpc	r19, r1
   3ebd6:	79 f7       	brne	.-34     	; 0x3ebb6 <main+0x1c0>
		{
			sendchar('!');
		}
		PrintNewLine();
   3ebd8:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
{
char			keepGoing;
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
   3ebdc:	0f 5f       	subi	r16, 0xFF	; 255
   3ebde:	1f 4f       	sbci	r17, 0xFF	; 255
   3ebe0:	05 30       	cpi	r16, 0x05	; 5
   3ebe2:	11 05       	cpc	r17, r1
   3ebe4:	19 f0       	breq	.+6      	; 0x3ebec <main+0x1f6>
   3ebe6:	20 e0       	ldi	r18, 0x00	; 0
   3ebe8:	30 e0       	ldi	r19, 0x00	; 0
   3ebea:	e5 cf       	rjmp	.-54     	; 0x3ebb6 <main+0x1c0>
			sendchar('!');
		}
		PrintNewLine();
	}

	gRamIndex			=	0;
   3ebec:	10 92 08 02 	sts	0x0208, r1
   3ebf0:	10 92 09 02 	sts	0x0209, r1
   3ebf4:	10 92 0a 02 	sts	0x020A, r1
   3ebf8:	10 92 0b 02 	sts	0x020B, r1
	gFlashIndex			=	0;
   3ebfc:	10 92 04 02 	sts	0x0204, r1
   3ec00:	10 92 05 02 	sts	0x0205, r1
   3ec04:	10 92 06 02 	sts	0x0206, r1
   3ec08:	10 92 07 02 	sts	0x0207, r1
	gEepromIndex		=	0;
   3ec0c:	10 92 00 02 	sts	0x0200, r1
   3ec10:	10 92 01 02 	sts	0x0201, r1
   3ec14:	10 92 02 02 	sts	0x0202, r1
   3ec18:	10 92 03 02 	sts	0x0203, r1

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   3ec1c:	8f ee       	ldi	r24, 0xEF	; 239
   3ec1e:	90 ee       	ldi	r25, 0xE0	; 224
   3ec20:	60 e0       	ldi	r22, 0x00	; 0
   3ec22:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>

	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
   3ec26:	80 e1       	ldi	r24, 0x10	; 16
   3ec28:	91 ee       	ldi	r25, 0xE1	; 225
   3ec2a:	60 e0       	ldi	r22, 0x00	; 0
   3ec2c:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3ec30:	80 91 c0 00 	lds	r24, 0x00C0
   3ec34:	87 ff       	sbrs	r24, 7
   3ec36:	fc cf       	rjmp	.-8      	; 0x3ec30 <main+0x23a>
	{
		// wait for data
	}
	return UART_DATA_REG;
   3ec38:	90 91 c6 00 	lds	r25, 0x00C6
	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
		theChar	=	recchar();
		if (theChar >= 0x60)
   3ec3c:	90 36       	cpi	r25, 0x60	; 96
   3ec3e:	08 f0       	brcs	.+2      	; 0x3ec42 <main+0x24c>
		{
			theChar	=	theChar & 0x5F;
   3ec40:	9f 75       	andi	r25, 0x5F	; 95
		{
			
		}
		else
	#endif
		if (theChar >= 0x20)
   3ec42:	90 32       	cpi	r25, 0x20	; 32
   3ec44:	b8 f0       	brcs	.+46     	; 0x3ec74 <main+0x27e>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3ec46:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3ec4a:	80 91 c0 00 	lds	r24, 0x00C0
   3ec4e:	86 ff       	sbrs	r24, 6
   3ec50:	fc cf       	rjmp	.-8      	; 0x3ec4a <main+0x254>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3ec52:	80 91 c0 00 	lds	r24, 0x00C0
   3ec56:	80 64       	ori	r24, 0x40	; 64
   3ec58:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3ec5c:	80 e2       	ldi	r24, 0x20	; 32
   3ec5e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3ec62:	80 91 c0 00 	lds	r24, 0x00C0
   3ec66:	86 ff       	sbrs	r24, 6
   3ec68:	fc cf       	rjmp	.-8      	; 0x3ec62 <main+0x26c>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3ec6a:	80 91 c0 00 	lds	r24, 0x00C0
   3ec6e:	80 64       	ori	r24, 0x40	; 64
   3ec70:	80 93 c0 00 	sts	0x00C0, r24
		{
			sendchar(theChar);
			sendchar(0x20);
		}

		switch(theChar)
   3ec74:	98 34       	cpi	r25, 0x48	; 72
   3ec76:	09 f4       	brne	.+2      	; 0x3ec7a <main+0x284>
   3ec78:	db c1       	rjmp	.+950    	; 0x3f030 <main+0x63a>
   3ec7a:	99 34       	cpi	r25, 0x49	; 73
   3ec7c:	b8 f4       	brcc	.+46     	; 0x3ecac <main+0x2b6>
   3ec7e:	92 34       	cpi	r25, 0x42	; 66
   3ec80:	09 f4       	brne	.+2      	; 0x3ec84 <main+0x28e>
   3ec82:	5d c1       	rjmp	.+698    	; 0x3ef3e <main+0x548>
   3ec84:	93 34       	cpi	r25, 0x43	; 67
   3ec86:	58 f4       	brcc	.+22     	; 0x3ec9e <main+0x2a8>
   3ec88:	90 33       	cpi	r25, 0x30	; 48
   3ec8a:	19 f1       	breq	.+70     	; 0x3ecd2 <main+0x2dc>
   3ec8c:	90 33       	cpi	r25, 0x30	; 48
   3ec8e:	08 f4       	brcc	.+2      	; 0x3ec92 <main+0x29c>
   3ec90:	1c c6       	rjmp	.+3128   	; 0x3f8ca <main+0xed4>
   3ec92:	9f 33       	cpi	r25, 0x3F	; 63
   3ec94:	a1 f1       	breq	.+104    	; 0x3ecfe <main+0x308>
   3ec96:	90 34       	cpi	r25, 0x40	; 64
   3ec98:	09 f0       	breq	.+2      	; 0x3ec9c <main+0x2a6>
   3ec9a:	17 c6       	rjmp	.+3118   	; 0x3f8ca <main+0xed4>
   3ec9c:	bd c0       	rjmp	.+378    	; 0x3ee18 <main+0x422>
   3ec9e:	95 34       	cpi	r25, 0x45	; 69
   3eca0:	09 f4       	brne	.+2      	; 0x3eca4 <main+0x2ae>
   3eca2:	74 c1       	rjmp	.+744    	; 0x3ef8c <main+0x596>
   3eca4:	96 34       	cpi	r25, 0x46	; 70
   3eca6:	09 f0       	breq	.+2      	; 0x3ecaa <main+0x2b4>
   3eca8:	10 c6       	rjmp	.+3104   	; 0x3f8ca <main+0xed4>
   3ecaa:	9c c1       	rjmp	.+824    	; 0x3efe4 <main+0x5ee>
   3ecac:	92 35       	cpi	r25, 0x52	; 82
   3ecae:	09 f4       	brne	.+2      	; 0x3ecb2 <main+0x2bc>
   3ecb0:	2f c2       	rjmp	.+1118   	; 0x3f110 <main+0x71a>
   3ecb2:	93 35       	cpi	r25, 0x53	; 83
   3ecb4:	38 f4       	brcc	.+14     	; 0x3ecc4 <main+0x2ce>
   3ecb6:	9c 34       	cpi	r25, 0x4C	; 76
   3ecb8:	09 f4       	brne	.+2      	; 0x3ecbc <main+0x2c6>
   3ecba:	f9 c1       	rjmp	.+1010   	; 0x3f0ae <main+0x6b8>
   3ecbc:	91 35       	cpi	r25, 0x51	; 81
   3ecbe:	09 f0       	breq	.+2      	; 0x3ecc2 <main+0x2cc>
   3ecc0:	04 c6       	rjmp	.+3080   	; 0x3f8ca <main+0xed4>
   3ecc2:	1c c2       	rjmp	.+1080   	; 0x3f0fc <main+0x706>
   3ecc4:	96 35       	cpi	r25, 0x56	; 86
   3ecc6:	09 f4       	brne	.+2      	; 0x3ecca <main+0x2d4>
   3ecc8:	49 c2       	rjmp	.+1170   	; 0x3f15c <main+0x766>
   3ecca:	99 35       	cpi	r25, 0x59	; 89
   3eccc:	09 f0       	breq	.+2      	; 0x3ecd0 <main+0x2da>
   3ecce:	fd c5       	rjmp	.+3066   	; 0x3f8ca <main+0xed4>
   3ecd0:	a0 c4       	rjmp	.+2368   	; 0x3f612 <main+0xc1c>
		{
			case '0':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 2);
   3ecd2:	85 e8       	ldi	r24, 0x85	; 133
   3ecd4:	92 ee       	ldi	r25, 0xE2	; 226
   3ecd6:	62 e0       	ldi	r22, 0x02	; 2
   3ecd8:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
				gFlashIndex		=	0;
   3ecdc:	10 92 04 02 	sts	0x0204, r1
   3ece0:	10 92 05 02 	sts	0x0205, r1
   3ece4:	10 92 06 02 	sts	0x0206, r1
   3ece8:	10 92 07 02 	sts	0x0207, r1
				gRamIndex		=	0;
   3ecec:	10 92 08 02 	sts	0x0208, r1
   3ecf0:	10 92 09 02 	sts	0x0209, r1
   3ecf4:	10 92 0a 02 	sts	0x020A, r1
   3ecf8:	10 92 0b 02 	sts	0x020B, r1
   3ecfc:	17 c1       	rjmp	.+558    	; 0x3ef2c <main+0x536>
				gEepromIndex	=	0;
				break;

			case '?':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
   3ecfe:	89 e9       	ldi	r24, 0x99	; 153
   3ed00:	92 ee       	ldi	r25, 0xE2	; 226
   3ed02:	62 e0       	ldi	r22, 0x02	; 2
   3ed04:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
//************************************************************************
static void	PrintCPUstats(void)
{
unsigned char fuseByte;

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   3ed08:	8f ee       	ldi	r24, 0xEF	; 239
   3ed0a:	90 ee       	ldi	r25, 0xE0	; 224
   3ed0c:	60 e0       	ldi	r22, 0x00	; 0
   3ed0e:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_COMPILED_ON, 0);
   3ed12:	81 e2       	ldi	r24, 0x21	; 33
   3ed14:	91 ee       	ldi	r25, 0xE1	; 225
   3ed16:	60 e0       	ldi	r22, 0x00	; 0
   3ed18:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_DATE_STR, 0);
   3ed1c:	81 ec       	ldi	r24, 0xC1	; 193
   3ed1e:	91 ee       	ldi	r25, 0xE1	; 225
   3ed20:	60 e0       	ldi	r22, 0x00	; 0
   3ed22:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_CPU_Type, 0);
   3ed26:	81 e3       	ldi	r24, 0x31	; 49
   3ed28:	91 ee       	ldi	r25, 0xE1	; 225
   3ed2a:	60 e0       	ldi	r22, 0x00	; 0
   3ed2c:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   3ed30:	84 ee       	ldi	r24, 0xE4	; 228
   3ed32:	90 ee       	ldi	r25, 0xE0	; 224
   3ed34:	60 e0       	ldi	r22, 0x00	; 0
   3ed36:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_AVR_ARCH, 0);
   3ed3a:	81 e4       	ldi	r24, 0x41	; 65
   3ed3c:	91 ee       	ldi	r25, 0xE1	; 225
   3ed3e:	60 e0       	ldi	r22, 0x00	; 0
   3ed40:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	PrintDecInt(__AVR_ARCH__, 1);
   3ed44:	86 e0       	ldi	r24, 0x06	; 6
   3ed46:	90 e0       	ldi	r25, 0x00	; 0
   3ed48:	61 e0       	ldi	r22, 0x01	; 1
   3ed4a:	70 e0       	ldi	r23, 0x00	; 0
   3ed4c:	0f 94 a5 f3 	call	0x3e74a	; 0x3e74a <PrintDecInt>
	PrintNewLine();
   3ed50:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_GCC_VERSION, 0);
   3ed54:	81 e6       	ldi	r24, 0x61	; 97
   3ed56:	91 ee       	ldi	r25, 0xE1	; 225
   3ed58:	60 e0       	ldi	r22, 0x00	; 0
   3ed5a:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_VERSION_STR, 0);
   3ed5e:	83 ed       	ldi	r24, 0xD3	; 211
   3ed60:	91 ee       	ldi	r25, 0xE1	; 225
   3ed62:	60 e0       	ldi	r22, 0x00	; 0
   3ed64:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>

	//*	these can be found in avr/version.h
	PrintFromPROGMEM(gTextMsg_AVR_LIBC, 0);
   3ed68:	81 e5       	ldi	r24, 0x51	; 81
   3ed6a:	91 ee       	ldi	r25, 0xE1	; 225
   3ed6c:	60 e0       	ldi	r22, 0x00	; 0
   3ed6e:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_AVR_LIBC_VER_STR, 0);
   3ed72:	8d ec       	ldi	r24, 0xCD	; 205
   3ed74:	91 ee       	ldi	r25, 0xE1	; 225
   3ed76:	60 e0       	ldi	r22, 0x00	; 0
   3ed78:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>

#if defined(SIGNATURE_0)
	PrintFromPROGMEM(gTextMsg_CPU_SIGNATURE, 0);
   3ed7c:	81 e7       	ldi	r24, 0x71	; 113
   3ed7e:	91 ee       	ldi	r25, 0xE1	; 225
   3ed80:	60 e0       	ldi	r22, 0x00	; 0
   3ed82:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	//*	these can be found in avr/iomxxx.h
	PrintHexByte(SIGNATURE_0);
   3ed86:	8e e1       	ldi	r24, 0x1E	; 30
   3ed88:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
	PrintHexByte(SIGNATURE_1);
   3ed8c:	88 e9       	ldi	r24, 0x98	; 152
   3ed8e:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
	PrintHexByte(SIGNATURE_2);
   3ed92:	81 e0       	ldi	r24, 0x01	; 1
   3ed94:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
	PrintNewLine();
   3ed98:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
#endif


#if defined(GET_LOW_FUSE_BITS)
	//*	fuse settings
	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOW, 0);
   3ed9c:	81 e8       	ldi	r24, 0x81	; 129
   3ed9e:	91 ee       	ldi	r25, 0xE1	; 225
   3eda0:	60 e0       	ldi	r22, 0x00	; 0
   3eda2:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3eda6:	19 e0       	ldi	r17, 0x09	; 9
   3eda8:	e0 e0       	ldi	r30, 0x00	; 0
   3edaa:	f0 e0       	ldi	r31, 0x00	; 0
   3edac:	10 93 57 00 	sts	0x0057, r17
   3edb0:	e4 91       	lpm	r30, Z+
	PrintHexByte(fuseByte);
   3edb2:	8e 2f       	mov	r24, r30
   3edb4:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
	PrintNewLine();
   3edb8:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_HIGH, 0);
   3edbc:	81 e9       	ldi	r24, 0x91	; 145
   3edbe:	91 ee       	ldi	r25, 0xE1	; 225
   3edc0:	60 e0       	ldi	r22, 0x00	; 0
   3edc2:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3edc6:	e3 e0       	ldi	r30, 0x03	; 3
   3edc8:	f0 e0       	ldi	r31, 0x00	; 0
   3edca:	10 93 57 00 	sts	0x0057, r17
   3edce:	e4 91       	lpm	r30, Z+
	PrintHexByte(fuseByte);
   3edd0:	8e 2f       	mov	r24, r30
   3edd2:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
	PrintNewLine();
   3edd6:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_EXT, 0);
   3edda:	81 ea       	ldi	r24, 0xA1	; 161
   3eddc:	91 ee       	ldi	r25, 0xE1	; 225
   3edde:	60 e0       	ldi	r22, 0x00	; 0
   3ede0:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   3ede4:	e2 e0       	ldi	r30, 0x02	; 2
   3ede6:	f0 e0       	ldi	r31, 0x00	; 0
   3ede8:	10 93 57 00 	sts	0x0057, r17
   3edec:	e4 91       	lpm	r30, Z+
	PrintHexByte(fuseByte);
   3edee:	8e 2f       	mov	r24, r30
   3edf0:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
	PrintNewLine();
   3edf4:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOCK, 0);
   3edf8:	81 eb       	ldi	r24, 0xB1	; 177
   3edfa:	91 ee       	ldi	r25, 0xE1	; 225
   3edfc:	60 e0       	ldi	r22, 0x00	; 0
   3edfe:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   3ee02:	e1 e0       	ldi	r30, 0x01	; 1
   3ee04:	f0 e0       	ldi	r31, 0x00	; 0
   3ee06:	10 93 57 00 	sts	0x0057, r17
   3ee0a:	14 91       	lpm	r17, Z+
	PrintHexByte(fuseByte);
   3ee0c:	81 2f       	mov	r24, r17
   3ee0e:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
	PrintNewLine();
   3ee12:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
   3ee16:	07 cf       	rjmp	.-498    	; 0x3ec26 <main+0x230>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
				PrintCPUstats();
				break;

			case '@':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
   3ee18:	85 ea       	ldi	r24, 0xA5	; 165
   3ee1a:	92 ee       	ldi	r25, 0xE2	; 226
   3ee1c:	62 e0       	ldi	r22, 0x02	; 2
   3ee1e:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
int		ii;
char	theChar;
char	theEEPROMchar;
int		errorCount;

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
   3ee22:	85 e5       	ldi	r24, 0x55	; 85
   3ee24:	92 ee       	ldi	r25, 0xE2	; 226
   3ee26:	60 e0       	ldi	r22, 0x00	; 0
   3ee28:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintNewLine();
   3ee2c:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
   3ee30:	00 e0       	ldi	r16, 0x00	; 0
   3ee32:	10 e0       	ldi	r17, 0x00	; 0
   3ee34:	19 c0       	rjmp	.+50     	; 0x3ee68 <main+0x472>
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#else
	while (((theChar = pgm_read_byte_near(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#endif
	{
		eeprom_write_byte((uint8_t *)ii, theChar);
   3ee36:	c8 01       	movw	r24, r16
   3ee38:	6f 2d       	mov	r22, r15
   3ee3a:	0f 94 e1 ff 	call	0x3ffc2	; 0x3ffc2 <__eewr_byte_m2560>
		if (theChar == 0)
   3ee3e:	ff 20       	and	r15, r15
   3ee40:	31 f4       	brne	.+12     	; 0x3ee4e <main+0x458>
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   3ee42:	83 e5       	ldi	r24, 0x53	; 83
   3ee44:	92 ee       	ldi	r25, 0xE2	; 226
   3ee46:	60 e0       	ldi	r22, 0x00	; 0
   3ee48:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
   3ee4c:	0b c0       	rjmp	.+22     	; 0x3ee64 <main+0x46e>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3ee4e:	f0 92 c6 00 	sts	0x00C6, r15
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3ee52:	80 91 c0 00 	lds	r24, 0x00C0
   3ee56:	86 ff       	sbrs	r24, 6
   3ee58:	fc cf       	rjmp	.-8      	; 0x3ee52 <main+0x45c>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3ee5a:	80 91 c0 00 	lds	r24, 0x00C0
   3ee5e:	80 64       	ori	r24, 0x40	; 64
   3ee60:	80 93 c0 00 	sts	0x00C0, r24
		}
		else
		{
			sendchar(theChar);
		}
		ii++;
   3ee64:	0f 5f       	subi	r16, 0xFF	; 255
   3ee66:	1f 4f       	sbci	r17, 0xFF	; 255

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
	PrintNewLine();
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   3ee68:	c8 01       	movw	r24, r16
   3ee6a:	81 51       	subi	r24, 0x11	; 17
   3ee6c:	9f 41       	sbci	r25, 0x1F	; 31
   3ee6e:	aa 27       	eor	r26, r26
   3ee70:	97 fd       	sbrc	r25, 7
   3ee72:	a0 95       	com	r26
   3ee74:	ba 2f       	mov	r27, r26
   3ee76:	ab bf       	out	0x3b, r26	; 59
   3ee78:	fc 01       	movw	r30, r24
   3ee7a:	f7 90       	elpm	r15, Z+
   3ee7c:	5a e2       	ldi	r21, 0x2A	; 42
   3ee7e:	f5 16       	cp	r15, r21
   3ee80:	21 f0       	breq	.+8      	; 0x3ee8a <main+0x494>
   3ee82:	62 e0       	ldi	r22, 0x02	; 2
   3ee84:	00 30       	cpi	r16, 0x00	; 0
   3ee86:	16 07       	cpc	r17, r22
   3ee88:	b1 f6       	brne	.-84     	; 0x3ee36 <main+0x440>
		}
		ii++;
	}

	//*	no go back through and test
	PrintNewLine();
   3ee8a:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
	PrintNewLine();
   3ee8e:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
   3ee92:	81 e6       	ldi	r24, 0x61	; 97
   3ee94:	92 ee       	ldi	r25, 0xE2	; 226
   3ee96:	60 e0       	ldi	r22, 0x00	; 0
   3ee98:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintNewLine();
   3ee9c:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
   3eea0:	cc 24       	eor	r12, r12
   3eea2:	dd 24       	eor	r13, r13
   3eea4:	00 e0       	ldi	r16, 0x00	; 0
   3eea6:	10 e0       	ldi	r17, 0x00	; 0
   3eea8:	1e c0       	rjmp	.+60     	; 0x3eee6 <main+0x4f0>
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#else
	while (((theChar = pgm_read_byte_near(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#endif
	{
		theEEPROMchar	=	eeprom_read_byte((uint8_t *)ii);
   3eeaa:	c8 01       	movw	r24, r16
   3eeac:	0f 94 d9 ff 	call	0x3ffb2	; 0x3ffb2 <__eerd_byte_m2560>
   3eeb0:	f8 2e       	mov	r15, r24
		if (theEEPROMchar == 0)
   3eeb2:	88 23       	and	r24, r24
   3eeb4:	31 f4       	brne	.+12     	; 0x3eec2 <main+0x4cc>
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   3eeb6:	83 e5       	ldi	r24, 0x53	; 83
   3eeb8:	92 ee       	ldi	r25, 0xE2	; 226
   3eeba:	60 e0       	ldi	r22, 0x00	; 0
   3eebc:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
   3eec0:	0b c0       	rjmp	.+22     	; 0x3eed8 <main+0x4e2>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3eec2:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3eec6:	80 91 c0 00 	lds	r24, 0x00C0
   3eeca:	86 ff       	sbrs	r24, 6
   3eecc:	fc cf       	rjmp	.-8      	; 0x3eec6 <main+0x4d0>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3eece:	80 91 c0 00 	lds	r24, 0x00C0
   3eed2:	80 64       	ori	r24, 0x40	; 64
   3eed4:	80 93 c0 00 	sts	0x00C0, r24
		}
		else
		{
			sendchar(theEEPROMchar);
		}
		if (theEEPROMchar != theChar)
   3eed8:	fe 14       	cp	r15, r14
   3eeda:	19 f0       	breq	.+6      	; 0x3eee2 <main+0x4ec>
		{
			errorCount++;
   3eedc:	08 94       	sec
   3eede:	c1 1c       	adc	r12, r1
   3eee0:	d1 1c       	adc	r13, r1
		}
		ii++;
   3eee2:	0f 5f       	subi	r16, 0xFF	; 255
   3eee4:	1f 4f       	sbci	r17, 0xFF	; 255
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
	PrintNewLine();
	errorCount	=	0;
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   3eee6:	c8 01       	movw	r24, r16
   3eee8:	81 51       	subi	r24, 0x11	; 17
   3eeea:	9f 41       	sbci	r25, 0x1F	; 31
   3eeec:	aa 27       	eor	r26, r26
   3eeee:	97 fd       	sbrc	r25, 7
   3eef0:	a0 95       	com	r26
   3eef2:	ba 2f       	mov	r27, r26
   3eef4:	ab bf       	out	0x3b, r26	; 59
   3eef6:	fc 01       	movw	r30, r24
   3eef8:	e7 90       	elpm	r14, Z+
   3eefa:	7a e2       	ldi	r23, 0x2A	; 42
   3eefc:	e7 16       	cp	r14, r23
   3eefe:	21 f0       	breq	.+8      	; 0x3ef08 <main+0x512>
   3ef00:	82 e0       	ldi	r24, 0x02	; 2
   3ef02:	00 30       	cpi	r16, 0x00	; 0
   3ef04:	18 07       	cpc	r17, r24
   3ef06:	89 f6       	brne	.-94     	; 0x3eeaa <main+0x4b4>
		{
			errorCount++;
		}
		ii++;
	}
	PrintNewLine();
   3ef08:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
	PrintNewLine();
   3ef0c:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
	PrintFromPROGMEM(gTextMsg_EEPROMerrorCnt, 0);
   3ef10:	8c e6       	ldi	r24, 0x6C	; 108
   3ef12:	92 ee       	ldi	r25, 0xE2	; 226
   3ef14:	60 e0       	ldi	r22, 0x00	; 0
   3ef16:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	PrintDecInt(errorCount, 1);
   3ef1a:	c6 01       	movw	r24, r12
   3ef1c:	61 e0       	ldi	r22, 0x01	; 1
   3ef1e:	70 e0       	ldi	r23, 0x00	; 0
   3ef20:	0f 94 a5 f3 	call	0x3e74a	; 0x3e74a <PrintDecInt>
	PrintNewLine();
   3ef24:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
	PrintNewLine();
   3ef28:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>

	gEepromIndex	=	0;	//*	set index back to zero for next eeprom dump
   3ef2c:	10 92 00 02 	sts	0x0200, r1
   3ef30:	10 92 01 02 	sts	0x0201, r1
   3ef34:	10 92 02 02 	sts	0x0202, r1
   3ef38:	10 92 03 02 	sts	0x0203, r1
   3ef3c:	74 ce       	rjmp	.-792    	; 0x3ec26 <main+0x230>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
				EEPROMtest();
				break;

			case 'B':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
   3ef3e:	83 eb       	ldi	r24, 0xB3	; 179
   3ef40:	92 ee       	ldi	r25, 0xE2	; 226
   3ef42:	62 e0       	ldi	r22, 0x02	; 2
   3ef44:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
}

//************************************************************************
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3ef48:	27 9a       	sbi	0x04, 7	; 4
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3ef4a:	2f 9a       	sbi	0x05, 7	; 5
   3ef4c:	16 c0       	rjmp	.+44     	; 0x3ef7a <main+0x584>

	while (!Serial_Available())
	{
		PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
   3ef4e:	2f 98       	cbi	0x05, 7	; 5
   3ef50:	80 e0       	ldi	r24, 0x00	; 0
   3ef52:	90 e0       	ldi	r25, 0x00	; 0
   3ef54:	e0 ed       	ldi	r30, 0xD0	; 208
   3ef56:	f7 e0       	ldi	r31, 0x07	; 7
   3ef58:	31 97       	sbiw	r30, 0x01	; 1
   3ef5a:	f1 f7       	brne	.-4      	; 0x3ef58 <main+0x562>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3ef5c:	01 96       	adiw	r24, 0x01	; 1
   3ef5e:	84 36       	cpi	r24, 0x64	; 100
   3ef60:	91 05       	cpc	r25, r1
   3ef62:	c1 f7       	brne	.-16     	; 0x3ef54 <main+0x55e>

	while (!Serial_Available())
	{
		PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
		delay_ms(100);
		PROGLED_PORT	|=	(1<<PROGLED_PIN);	// turn LED on
   3ef64:	2f 9a       	sbi	0x05, 7	; 5
   3ef66:	80 e0       	ldi	r24, 0x00	; 0
   3ef68:	90 e0       	ldi	r25, 0x00	; 0
   3ef6a:	e0 ed       	ldi	r30, 0xD0	; 208
   3ef6c:	f7 e0       	ldi	r31, 0x07	; 7
   3ef6e:	31 97       	sbiw	r30, 0x01	; 1
   3ef70:	f1 f7       	brne	.-4      	; 0x3ef6e <main+0x578>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3ef72:	01 96       	adiw	r24, 0x01	; 1
   3ef74:	84 36       	cpi	r24, 0x64	; 100
   3ef76:	91 05       	cpc	r25, r1
   3ef78:	c1 f7       	brne	.-16     	; 0x3ef6a <main+0x574>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3ef7a:	80 91 c0 00 	lds	r24, 0x00C0
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON

	while (!Serial_Available())
   3ef7e:	87 ff       	sbrs	r24, 7
   3ef80:	e6 cf       	rjmp	.-52     	; 0x3ef4e <main+0x558>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3ef82:	80 91 c0 00 	lds	r24, 0x00C0
   3ef86:	87 ff       	sbrs	r24, 7
   3ef88:	fc cf       	rjmp	.-8      	; 0x3ef82 <main+0x58c>
   3ef8a:	99 c4       	rjmp	.+2354   	; 0x3f8be <main+0xec8>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
				BlinkLED();
				break;

			case 'E':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 2);
   3ef8c:	8f eb       	ldi	r24, 0xBF	; 191
   3ef8e:	92 ee       	ldi	r25, 0xE2	; 226
   3ef90:	62 e0       	ldi	r22, 0x02	; 2
   3ef92:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
				DumpHex(kDUMP_EEPROM, gEepromIndex, 16);
   3ef96:	40 91 00 02 	lds	r20, 0x0200
   3ef9a:	50 91 01 02 	lds	r21, 0x0201
   3ef9e:	60 91 02 02 	lds	r22, 0x0202
   3efa2:	70 91 03 02 	lds	r23, 0x0203
   3efa6:	81 e0       	ldi	r24, 0x01	; 1
   3efa8:	20 e1       	ldi	r18, 0x10	; 16
   3efaa:	0f 94 2c f4 	call	0x3e858	; 0x3e858 <DumpHex>
				gEepromIndex	+=	256;
   3efae:	80 91 00 02 	lds	r24, 0x0200
   3efb2:	90 91 01 02 	lds	r25, 0x0201
   3efb6:	a0 91 02 02 	lds	r26, 0x0202
   3efba:	b0 91 03 02 	lds	r27, 0x0203
   3efbe:	80 50       	subi	r24, 0x00	; 0
   3efc0:	9f 4f       	sbci	r25, 0xFF	; 255
   3efc2:	af 4f       	sbci	r26, 0xFF	; 255
   3efc4:	bf 4f       	sbci	r27, 0xFF	; 255
   3efc6:	80 93 00 02 	sts	0x0200, r24
   3efca:	90 93 01 02 	sts	0x0201, r25
   3efce:	a0 93 02 02 	sts	0x0202, r26
   3efd2:	b0 93 03 02 	sts	0x0203, r27
				if (gEepromIndex > E2END)
   3efd6:	80 50       	subi	r24, 0x00	; 0
   3efd8:	90 41       	sbci	r25, 0x10	; 16
   3efda:	a0 40       	sbci	r26, 0x00	; 0
   3efdc:	b0 40       	sbci	r27, 0x00	; 0
   3efde:	08 f4       	brcc	.+2      	; 0x3efe2 <main+0x5ec>
   3efe0:	22 ce       	rjmp	.-956    	; 0x3ec26 <main+0x230>
   3efe2:	a4 cf       	rjmp	.-184    	; 0x3ef2c <main+0x536>
					gEepromIndex	=	0;
				}
				break;
		
			case 'F':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 2);
   3efe4:	8d ec       	ldi	r24, 0xCD	; 205
   3efe6:	92 ee       	ldi	r25, 0xE2	; 226
   3efe8:	62 e0       	ldi	r22, 0x02	; 2
   3efea:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
				DumpHex(kDUMP_FLASH, gFlashIndex, 16);
   3efee:	40 91 04 02 	lds	r20, 0x0204
   3eff2:	50 91 05 02 	lds	r21, 0x0205
   3eff6:	60 91 06 02 	lds	r22, 0x0206
   3effa:	70 91 07 02 	lds	r23, 0x0207
   3effe:	80 e0       	ldi	r24, 0x00	; 0
   3f000:	20 e1       	ldi	r18, 0x10	; 16
   3f002:	0f 94 2c f4 	call	0x3e858	; 0x3e858 <DumpHex>
				gFlashIndex	+=	256;
   3f006:	80 91 04 02 	lds	r24, 0x0204
   3f00a:	90 91 05 02 	lds	r25, 0x0205
   3f00e:	a0 91 06 02 	lds	r26, 0x0206
   3f012:	b0 91 07 02 	lds	r27, 0x0207
   3f016:	80 50       	subi	r24, 0x00	; 0
   3f018:	9f 4f       	sbci	r25, 0xFF	; 255
   3f01a:	af 4f       	sbci	r26, 0xFF	; 255
   3f01c:	bf 4f       	sbci	r27, 0xFF	; 255
   3f01e:	80 93 04 02 	sts	0x0204, r24
   3f022:	90 93 05 02 	sts	0x0205, r25
   3f026:	a0 93 06 02 	sts	0x0206, r26
   3f02a:	b0 93 07 02 	sts	0x0207, r27
   3f02e:	fb cd       	rjmp	.-1034   	; 0x3ec26 <main+0x230>
				break;

			case 'H':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
   3f030:	8a ed       	ldi	r24, 0xDA	; 218
   3f032:	92 ee       	ldi	r25, 0xE2	; 226
   3f034:	62 e0       	ldi	r22, 0x02	; 2
   3f036:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>


//*******************************************************************
static void PrintHelp(void)
{
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 0);
   3f03a:	85 e8       	ldi	r24, 0x85	; 133
   3f03c:	92 ee       	ldi	r25, 0xE2	; 226
   3f03e:	60 e0       	ldi	r22, 0x00	; 0
   3f040:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 0);
   3f044:	89 e9       	ldi	r24, 0x99	; 153
   3f046:	92 ee       	ldi	r25, 0xE2	; 226
   3f048:	60 e0       	ldi	r22, 0x00	; 0
   3f04a:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 0);
   3f04e:	85 ea       	ldi	r24, 0xA5	; 165
   3f050:	92 ee       	ldi	r25, 0xE2	; 226
   3f052:	60 e0       	ldi	r22, 0x00	; 0
   3f054:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 0);
   3f058:	83 eb       	ldi	r24, 0xB3	; 179
   3f05a:	92 ee       	ldi	r25, 0xE2	; 226
   3f05c:	60 e0       	ldi	r22, 0x00	; 0
   3f05e:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 0);
   3f062:	8f eb       	ldi	r24, 0xBF	; 191
   3f064:	92 ee       	ldi	r25, 0xE2	; 226
   3f066:	60 e0       	ldi	r22, 0x00	; 0
   3f068:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 0);
   3f06c:	8d ec       	ldi	r24, 0xCD	; 205
   3f06e:	92 ee       	ldi	r25, 0xE2	; 226
   3f070:	60 e0       	ldi	r22, 0x00	; 0
   3f072:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 0);
   3f076:	8a ed       	ldi	r24, 0xDA	; 218
   3f078:	92 ee       	ldi	r25, 0xE2	; 226
   3f07a:	60 e0       	ldi	r22, 0x00	; 0
   3f07c:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>

	PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 0);
   3f080:	81 ee       	ldi	r24, 0xE1	; 225
   3f082:	92 ee       	ldi	r25, 0xE2	; 226
   3f084:	60 e0       	ldi	r22, 0x00	; 0
   3f086:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 0);
   3f08a:	82 ef       	ldi	r24, 0xF2	; 242
   3f08c:	92 ee       	ldi	r25, 0xE2	; 226
   3f08e:	60 e0       	ldi	r22, 0x00	; 0
   3f090:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 0);
   3f094:	8c e0       	ldi	r24, 0x0C	; 12
   3f096:	93 ee       	ldi	r25, 0xE3	; 227
   3f098:	60 e0       	ldi	r22, 0x00	; 0
   3f09a:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 0);
   3f09e:	87 e1       	ldi	r24, 0x17	; 23
   3f0a0:	93 ee       	ldi	r25, 0xE3	; 227
   3f0a2:	60 e0       	ldi	r22, 0x00	; 0
   3f0a4:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 0);
   3f0a8:	80 e3       	ldi	r24, 0x30	; 48
   3f0aa:	93 ee       	ldi	r25, 0xE3	; 227
   3f0ac:	b9 cd       	rjmp	.-1166   	; 0x3ec20 <main+0x22a>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
				PrintHelp();
				break;

			case 'L':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
   3f0ae:	81 ee       	ldi	r24, 0xE1	; 225
   3f0b0:	92 ee       	ldi	r25, 0xE2	; 226
   3f0b2:	62 e0       	ldi	r22, 0x02	; 2
   3f0b4:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
//************************************************************************
static void	ListAvailablePorts(void)
{

#ifdef DDRA
	PrintAvailablePort('A');
   3f0b8:	81 e4       	ldi	r24, 0x41	; 65
   3f0ba:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRB
	PrintAvailablePort('B');
   3f0be:	82 e4       	ldi	r24, 0x42	; 66
   3f0c0:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRC
	PrintAvailablePort('C');
   3f0c4:	83 e4       	ldi	r24, 0x43	; 67
   3f0c6:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRD
	PrintAvailablePort('D');
   3f0ca:	84 e4       	ldi	r24, 0x44	; 68
   3f0cc:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRE
	PrintAvailablePort('E');
   3f0d0:	85 e4       	ldi	r24, 0x45	; 69
   3f0d2:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRF
	PrintAvailablePort('F');
   3f0d6:	86 e4       	ldi	r24, 0x46	; 70
   3f0d8:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRG
	PrintAvailablePort('G');
   3f0dc:	87 e4       	ldi	r24, 0x47	; 71
   3f0de:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRH
	PrintAvailablePort('H');
   3f0e2:	88 e4       	ldi	r24, 0x48	; 72
   3f0e4:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#ifdef DDRI
	PrintAvailablePort('I');
#endif

#ifdef DDRJ
	PrintAvailablePort('J');
   3f0e8:	8a e4       	ldi	r24, 0x4A	; 74
   3f0ea:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRK
	PrintAvailablePort('K');
   3f0ee:	8b e4       	ldi	r24, 0x4B	; 75
   3f0f0:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
#endif

#ifdef DDRL
	PrintAvailablePort('L');
   3f0f4:	8c e4       	ldi	r24, 0x4C	; 76
   3f0f6:	0f 94 16 f4 	call	0x3e82c	; 0x3e82c <PrintAvailablePort>
   3f0fa:	95 cd       	rjmp	.-1238   	; 0x3ec26 <main+0x230>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
				ListAvailablePorts();
				break;

			case 'Q':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 2);
   3f0fc:	82 ef       	ldi	r24, 0xF2	; 242
   3f0fe:	92 ee       	ldi	r25, 0xE2	; 226
   3f100:	62 e0       	ldi	r22, 0x02	; 2
   3f102:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
   3f106:	99 24       	eor	r9, r9
   3f108:	93 94       	inc	r9
   3f10a:	aa 24       	eor	r10, r10
   3f10c:	bb 24       	eor	r11, r11
   3f10e:	49 c4       	rjmp	.+2194   	; 0x3f9a2 <main+0xfac>
				keepGoing	=	false;
				break;

			case 'R':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 2);
   3f110:	8c e0       	ldi	r24, 0x0C	; 12
   3f112:	93 ee       	ldi	r25, 0xE3	; 227
   3f114:	62 e0       	ldi	r22, 0x02	; 2
   3f116:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
				DumpHex(kDUMP_RAM, gRamIndex, 16);
   3f11a:	40 91 08 02 	lds	r20, 0x0208
   3f11e:	50 91 09 02 	lds	r21, 0x0209
   3f122:	60 91 0a 02 	lds	r22, 0x020A
   3f126:	70 91 0b 02 	lds	r23, 0x020B
   3f12a:	82 e0       	ldi	r24, 0x02	; 2
   3f12c:	20 e1       	ldi	r18, 0x10	; 16
   3f12e:	0f 94 2c f4 	call	0x3e858	; 0x3e858 <DumpHex>
				gRamIndex	+=	256;
   3f132:	80 91 08 02 	lds	r24, 0x0208
   3f136:	90 91 09 02 	lds	r25, 0x0209
   3f13a:	a0 91 0a 02 	lds	r26, 0x020A
   3f13e:	b0 91 0b 02 	lds	r27, 0x020B
   3f142:	80 50       	subi	r24, 0x00	; 0
   3f144:	9f 4f       	sbci	r25, 0xFF	; 255
   3f146:	af 4f       	sbci	r26, 0xFF	; 255
   3f148:	bf 4f       	sbci	r27, 0xFF	; 255
   3f14a:	80 93 08 02 	sts	0x0208, r24
   3f14e:	90 93 09 02 	sts	0x0209, r25
   3f152:	a0 93 0a 02 	sts	0x020A, r26
   3f156:	b0 93 0b 02 	sts	0x020B, r27
   3f15a:	65 cd       	rjmp	.-1334   	; 0x3ec26 <main+0x230>
				break;

			case 'V':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
   3f15c:	87 e1       	ldi	r24, 0x17	; 23
   3f15e:	93 ee       	ldi	r25, 0xE3	; 227
   3f160:	62 e0       	ldi	r22, 0x02	; 2
   3f162:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   3f166:	84 ee       	ldi	r24, 0xE4	; 228
   3f168:	90 ee       	ldi	r25, 0xE0	; 224
   3f16a:	60 e0       	ldi	r22, 0x00	; 0
   3f16c:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
   3f170:	89 ed       	ldi	r24, 0xD9	; 217
   3f172:	91 ee       	ldi	r25, 0xE1	; 225
   3f174:	60 e0       	ldi	r22, 0x00	; 0
   3f176:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
   3f17a:	09 e7       	ldi	r16, 0x79	; 121
   3f17c:	15 ee       	ldi	r17, 0xE5	; 229
   3f17e:	cc 5d       	subi	r28, 0xDC	; 220
   3f180:	de 4f       	sbci	r29, 0xFE	; 254
   3f182:	19 83       	std	Y+1, r17	; 0x01
   3f184:	08 83       	st	Y, r16
   3f186:	c4 52       	subi	r28, 0x24	; 36
   3f188:	d1 40       	sbci	r29, 0x01	; 1
   3f18a:	66 24       	eor	r6, r6
   3f18c:	77 24       	eor	r7, r7
   3f18e:	43 01       	movw	r8, r6
   3f190:	ca 5d       	subi	r28, 0xDA	; 218
   3f192:	de 4f       	sbci	r29, 0xFE	; 254
   3f194:	19 82       	std	Y+1, r1	; 0x01
   3f196:	18 82       	st	Y, r1
   3f198:	c6 52       	subi	r28, 0x26	; 38
   3f19a:	d1 40       	sbci	r29, 0x01	; 1
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
	{
		wordMemoryAddress	=	myMemoryPtr / 2;
   3f19c:	a4 01       	movw	r20, r8
   3f19e:	93 01       	movw	r18, r6
   3f1a0:	56 95       	lsr	r21
   3f1a2:	47 95       	ror	r20
   3f1a4:	37 95       	ror	r19
   3f1a6:	27 95       	ror	r18
   3f1a8:	c8 5d       	subi	r28, 0xD8	; 216
   3f1aa:	de 4f       	sbci	r29, 0xFE	; 254
   3f1ac:	28 83       	st	Y, r18
   3f1ae:	39 83       	std	Y+1, r19	; 0x01
   3f1b0:	4a 83       	std	Y+2, r20	; 0x02
   3f1b2:	5b 83       	std	Y+3, r21	; 0x03
   3f1b4:	c8 52       	subi	r28, 0x28	; 40
   3f1b6:	d1 40       	sbci	r29, 0x01	; 1
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
   3f1b8:	ca 5d       	subi	r28, 0xDA	; 218
   3f1ba:	de 4f       	sbci	r29, 0xFE	; 254
   3f1bc:	48 81       	ld	r20, Y
   3f1be:	59 81       	ldd	r21, Y+1	; 0x01
   3f1c0:	c6 52       	subi	r28, 0x26	; 38
   3f1c2:	d1 40       	sbci	r29, 0x01	; 1
   3f1c4:	4f 5f       	subi	r20, 0xFF	; 255
   3f1c6:	5f 4f       	sbci	r21, 0xFF	; 255
   3f1c8:	ca 5d       	subi	r28, 0xDA	; 218
   3f1ca:	de 4f       	sbci	r29, 0xFE	; 254
   3f1cc:	59 83       	std	Y+1, r21	; 0x01
   3f1ce:	48 83       	st	Y, r20
   3f1d0:	c6 52       	subi	r28, 0x26	; 38
   3f1d2:	d1 40       	sbci	r29, 0x01	; 1
   3f1d4:	ca 01       	movw	r24, r20
   3f1d6:	62 e0       	ldi	r22, 0x02	; 2
   3f1d8:	70 e0       	ldi	r23, 0x00	; 0
   3f1da:	0f 94 a5 f3 	call	0x3e74a	; 0x3e74a <PrintDecInt>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f1de:	50 e2       	ldi	r21, 0x20	; 32
   3f1e0:	50 93 c6 00 	sts	0x00C6, r21
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f1e4:	80 91 c0 00 	lds	r24, 0x00C0
   3f1e8:	86 ff       	sbrs	r24, 6
   3f1ea:	fc cf       	rjmp	.-8      	; 0x3f1e4 <main+0x7ee>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f1ec:	80 91 c0 00 	lds	r24, 0x00C0
   3f1f0:	80 64       	ori	r24, 0x40	; 64
   3f1f2:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f1f6:	6d e2       	ldi	r22, 0x2D	; 45
   3f1f8:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f1fc:	80 91 c0 00 	lds	r24, 0x00C0
   3f200:	86 ff       	sbrs	r24, 6
   3f202:	fc cf       	rjmp	.-8      	; 0x3f1fc <main+0x806>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f204:	80 91 c0 00 	lds	r24, 0x00C0
   3f208:	80 64       	ori	r24, 0x40	; 64
   3f20a:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f20e:	70 e2       	ldi	r23, 0x20	; 32
   3f210:	70 93 c6 00 	sts	0x00C6, r23
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f214:	80 91 c0 00 	lds	r24, 0x00C0
   3f218:	86 ff       	sbrs	r24, 6
   3f21a:	fc cf       	rjmp	.-8      	; 0x3f214 <main+0x81e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f21c:	80 91 c0 00 	lds	r24, 0x00C0
   3f220:	80 64       	ori	r24, 0x40	; 64
   3f222:	80 93 c0 00 	sts	0x00C0, r24
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);
		PrintHexByte((wordMemoryAddress >> 8) & 0x00ff);
   3f226:	c8 5d       	subi	r28, 0xD8	; 216
   3f228:	de 4f       	sbci	r29, 0xFE	; 254
   3f22a:	e8 80       	ld	r14, Y
   3f22c:	f9 80       	ldd	r15, Y+1	; 0x01
   3f22e:	0a 81       	ldd	r16, Y+2	; 0x02
   3f230:	1b 81       	ldd	r17, Y+3	; 0x03
   3f232:	c8 52       	subi	r28, 0x28	; 40
   3f234:	d1 40       	sbci	r29, 0x01	; 1
   3f236:	bb 27       	eor	r27, r27
   3f238:	a1 2f       	mov	r26, r17
   3f23a:	90 2f       	mov	r25, r16
   3f23c:	8f 2d       	mov	r24, r15
   3f23e:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
		PrintHexByte((wordMemoryAddress) & 0x00ff);
   3f242:	c8 5d       	subi	r28, 0xD8	; 216
   3f244:	de 4f       	sbci	r29, 0xFE	; 254
   3f246:	88 81       	ld	r24, Y
   3f248:	c8 52       	subi	r28, 0x28	; 40
   3f24a:	d1 40       	sbci	r29, 0x01	; 1
   3f24c:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f250:	e0 e2       	ldi	r30, 0x20	; 32
   3f252:	fe 2e       	mov	r15, r30
   3f254:	f0 92 c6 00 	sts	0x00C6, r15
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f258:	80 91 c0 00 	lds	r24, 0x00C0
   3f25c:	86 ff       	sbrs	r24, 6
   3f25e:	fc cf       	rjmp	.-8      	; 0x3f258 <main+0x862>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f260:	80 91 c0 00 	lds	r24, 0x00C0
   3f264:	80 64       	ori	r24, 0x40	; 64
   3f266:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f26a:	0d e3       	ldi	r16, 0x3D	; 61
   3f26c:	00 93 c6 00 	sts	0x00C6, r16
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f270:	80 91 c0 00 	lds	r24, 0x00C0
   3f274:	86 ff       	sbrs	r24, 6
   3f276:	fc cf       	rjmp	.-8      	; 0x3f270 <main+0x87a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f278:	80 91 c0 00 	lds	r24, 0x00C0
   3f27c:	80 64       	ori	r24, 0x40	; 64
   3f27e:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f282:	10 e2       	ldi	r17, 0x20	; 32
   3f284:	10 93 c6 00 	sts	0x00C6, r17
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f288:	80 91 c0 00 	lds	r24, 0x00C0
   3f28c:	86 ff       	sbrs	r24, 6
   3f28e:	fc cf       	rjmp	.-8      	; 0x3f288 <main+0x892>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f290:	80 91 c0 00 	lds	r24, 0x00C0
   3f294:	80 64       	ori	r24, 0x40	; 64
   3f296:	80 93 c0 00 	sts	0x00C0, r24
		sendchar(0x20);

	
		//*	the AVR is LITTLE ENDIAN, swap the byte order
	#if (FLASHEND > 0x10000)
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
   3f29a:	8b be       	out	0x3b, r8	; 59
   3f29c:	f3 01       	movw	r30, r6
   3f29e:	27 91       	elpm	r18, Z+
   3f2a0:	c4 5d       	subi	r28, 0xD4	; 212
   3f2a2:	de 4f       	sbci	r29, 0xFE	; 254
   3f2a4:	28 83       	st	Y, r18
   3f2a6:	cc 52       	subi	r28, 0x2C	; 44
   3f2a8:	d1 40       	sbci	r29, 0x01	; 1
   3f2aa:	a2 2e       	mov	r10, r18
   3f2ac:	bb 24       	eor	r11, r11
   3f2ae:	cc 24       	eor	r12, r12
   3f2b0:	dd 24       	eor	r13, r13
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
   3f2b2:	08 94       	sec
   3f2b4:	61 1c       	adc	r6, r1
   3f2b6:	71 1c       	adc	r7, r1
   3f2b8:	81 1c       	adc	r8, r1
   3f2ba:	91 1c       	adc	r9, r1
   3f2bc:	8b be       	out	0x3b, r8	; 59
   3f2be:	f3 01       	movw	r30, r6
   3f2c0:	87 91       	elpm	r24, Z+
   3f2c2:	28 2e       	mov	r2, r24
   3f2c4:	33 24       	eor	r3, r3
   3f2c6:	44 24       	eor	r4, r4
   3f2c8:	55 24       	eor	r5, r5
		byte3	=	pgm_read_byte_far(myMemoryPtr++);
   3f2ca:	08 94       	sec
   3f2cc:	61 1c       	adc	r6, r1
   3f2ce:	71 1c       	adc	r7, r1
   3f2d0:	81 1c       	adc	r8, r1
   3f2d2:	91 1c       	adc	r9, r1
   3f2d4:	8b be       	out	0x3b, r8	; 59
   3f2d6:	f3 01       	movw	r30, r6
   3f2d8:	37 91       	elpm	r19, Z+
   3f2da:	c3 5d       	subi	r28, 0xD3	; 211
   3f2dc:	de 4f       	sbci	r29, 0xFE	; 254
   3f2de:	38 83       	st	Y, r19
   3f2e0:	cd 52       	subi	r28, 0x2D	; 45
   3f2e2:	d1 40       	sbci	r29, 0x01	; 1
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
   3f2e4:	08 94       	sec
   3f2e6:	61 1c       	adc	r6, r1
   3f2e8:	71 1c       	adc	r7, r1
   3f2ea:	81 1c       	adc	r8, r1
   3f2ec:	91 1c       	adc	r9, r1
   3f2ee:	8b be       	out	0x3b, r8	; 59
   3f2f0:	f3 01       	movw	r30, r6
   3f2f2:	47 91       	elpm	r20, Z+
   3f2f4:	c2 5d       	subi	r28, 0xD2	; 210
   3f2f6:	de 4f       	sbci	r29, 0xFE	; 254
   3f2f8:	48 83       	st	Y, r20
   3f2fa:	ce 52       	subi	r28, 0x2E	; 46
   3f2fc:	d1 40       	sbci	r29, 0x01	; 1
   3f2fe:	7d ef       	ldi	r23, 0xFD	; 253
   3f300:	e7 2e       	mov	r14, r23
   3f302:	7f ef       	ldi	r23, 0xFF	; 255
   3f304:	f7 2e       	mov	r15, r23
   3f306:	7f ef       	ldi	r23, 0xFF	; 255
   3f308:	07 2f       	mov	r16, r23
   3f30a:	7f ef       	ldi	r23, 0xFF	; 255
   3f30c:	17 2f       	mov	r17, r23
   3f30e:	6e 0c       	add	r6, r14
   3f310:	7f 1c       	adc	r7, r15
   3f312:	80 1e       	adc	r8, r16
   3f314:	91 1e       	adc	r9, r17
		byte1	=	pgm_read_byte_near(myMemoryPtr++);
		byte2	=	pgm_read_byte_near(myMemoryPtr++);
		byte3	=	pgm_read_byte_near(myMemoryPtr++);
		byte4	=	pgm_read_byte_near(myMemoryPtr++);
	#endif
		word1	=	(byte2 << 8) + byte1;
   3f316:	14 2d       	mov	r17, r4
   3f318:	03 2d       	mov	r16, r3
   3f31a:	f2 2c       	mov	r15, r2
   3f31c:	ee 24       	eor	r14, r14
   3f31e:	ea 0c       	add	r14, r10
   3f320:	fb 1c       	adc	r15, r11
   3f322:	0c 1d       	adc	r16, r12
   3f324:	1d 1d       	adc	r17, r13
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
   3f326:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f32a:	20 e2       	ldi	r18, 0x20	; 32
   3f32c:	20 93 c6 00 	sts	0x00C6, r18
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f330:	80 91 c0 00 	lds	r24, 0x00C0
   3f334:	86 ff       	sbrs	r24, 6
   3f336:	fc cf       	rjmp	.-8      	; 0x3f330 <main+0x93a>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f338:	80 91 c0 00 	lds	r24, 0x00C0
   3f33c:	80 64       	ori	r24, 0x40	; 64
   3f33e:	80 93 c0 00 	sts	0x00C0, r24
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
		sendchar(0x20);
		PrintHexByte(byte1);
   3f342:	c4 5d       	subi	r28, 0xD4	; 212
   3f344:	de 4f       	sbci	r29, 0xFE	; 254
   3f346:	88 81       	ld	r24, Y
   3f348:	cc 52       	subi	r28, 0x2C	; 44
   3f34a:	d1 40       	sbci	r29, 0x01	; 1
   3f34c:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f350:	30 e2       	ldi	r19, 0x20	; 32
   3f352:	30 93 c6 00 	sts	0x00C6, r19
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f356:	80 91 c0 00 	lds	r24, 0x00C0
   3f35a:	86 ff       	sbrs	r24, 6
   3f35c:	fc cf       	rjmp	.-8      	; 0x3f356 <main+0x960>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f35e:	80 91 c0 00 	lds	r24, 0x00C0
   3f362:	80 64       	ori	r24, 0x40	; 64
   3f364:	80 93 c0 00 	sts	0x00C0, r24

		PrintHexByte(byte2);
		sendchar(0x20);
		PrintHexByte(byte1);
		sendchar(0x20);
		PrintHexByte(byte4);
   3f368:	c2 5d       	subi	r28, 0xD2	; 210
   3f36a:	de 4f       	sbci	r29, 0xFE	; 254
   3f36c:	88 81       	ld	r24, Y
   3f36e:	ce 52       	subi	r28, 0x2E	; 46
   3f370:	d1 40       	sbci	r29, 0x01	; 1
   3f372:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f376:	40 e2       	ldi	r20, 0x20	; 32
   3f378:	40 93 c6 00 	sts	0x00C6, r20
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f37c:	80 91 c0 00 	lds	r24, 0x00C0
   3f380:	86 ff       	sbrs	r24, 6
   3f382:	fc cf       	rjmp	.-8      	; 0x3f37c <main+0x986>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f384:	80 91 c0 00 	lds	r24, 0x00C0
   3f388:	80 64       	ori	r24, 0x40	; 64
   3f38a:	80 93 c0 00 	sts	0x00C0, r24
		sendchar(0x20);
		PrintHexByte(byte1);
		sendchar(0x20);
		PrintHexByte(byte4);
		sendchar(0x20);
		PrintHexByte(byte3);
   3f38e:	c3 5d       	subi	r28, 0xD3	; 211
   3f390:	de 4f       	sbci	r29, 0xFE	; 254
   3f392:	88 81       	ld	r24, Y
   3f394:	cd 52       	subi	r28, 0x2D	; 45
   3f396:	d1 40       	sbci	r29, 0x01	; 1
   3f398:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f39c:	50 e2       	ldi	r21, 0x20	; 32
   3f39e:	50 93 c6 00 	sts	0x00C6, r21
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f3a2:	80 91 c0 00 	lds	r24, 0x00C0
   3f3a6:	86 ff       	sbrs	r24, 6
   3f3a8:	fc cf       	rjmp	.-8      	; 0x3f3a2 <main+0x9ac>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f3aa:	80 91 c0 00 	lds	r24, 0x00C0
   3f3ae:	80 64       	ori	r24, 0x40	; 64
   3f3b0:	80 93 c0 00 	sts	0x00C0, r24
		PrintHexByte(byte4);
		sendchar(0x20);
		PrintHexByte(byte3);
		sendchar(0x20);
	
		if (word1 == 0xffff)
   3f3b4:	6f ef       	ldi	r22, 0xFF	; 255
   3f3b6:	e6 16       	cp	r14, r22
   3f3b8:	6f ef       	ldi	r22, 0xFF	; 255
   3f3ba:	f6 06       	cpc	r15, r22
   3f3bc:	60 e0       	ldi	r22, 0x00	; 0
   3f3be:	06 07       	cpc	r16, r22
   3f3c0:	60 e0       	ldi	r22, 0x00	; 0
   3f3c2:	16 07       	cpc	r17, r22
   3f3c4:	31 f4       	brne	.+12     	; 0x3f3d2 <main+0x9dc>
		{
			PrintFromPROGMEM(gTextMsg_noVector, 0);
   3f3c6:	8e e0       	ldi	r24, 0x0E	; 14
   3f3c8:	92 ee       	ldi	r25, 0xE2	; 226
   3f3ca:	60 e0       	ldi	r22, 0x00	; 0
   3f3cc:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
   3f3d0:	df c0       	rjmp	.+446    	; 0x3f590 <main+0xb9a>
		}
		else if ((word1 & 0xc000) == 0xc000)
   3f3d2:	d8 01       	movw	r26, r16
   3f3d4:	c7 01       	movw	r24, r14
   3f3d6:	80 70       	andi	r24, 0x00	; 0
   3f3d8:	90 7c       	andi	r25, 0xC0	; 192
   3f3da:	a0 70       	andi	r26, 0x00	; 0
   3f3dc:	b0 70       	andi	r27, 0x00	; 0
   3f3de:	80 50       	subi	r24, 0x00	; 0
   3f3e0:	90 4c       	sbci	r25, 0xC0	; 192
   3f3e2:	a0 40       	sbci	r26, 0x00	; 0
   3f3e4:	b0 40       	sbci	r27, 0x00	; 0
   3f3e6:	d1 f5       	brne	.+116    	; 0x3f45c <main+0xa66>
		{
			//*	rjmp instruction
			realitiveAddr	=	word1 & 0x3FFF;
   3f3e8:	8f ef       	ldi	r24, 0xFF	; 255
   3f3ea:	9f e3       	ldi	r25, 0x3F	; 63
   3f3ec:	a0 e0       	ldi	r26, 0x00	; 0
   3f3ee:	b0 e0       	ldi	r27, 0x00	; 0
   3f3f0:	e8 22       	and	r14, r24
   3f3f2:	f9 22       	and	r15, r25
   3f3f4:	0a 23       	and	r16, r26
   3f3f6:	1b 23       	and	r17, r27
			absoluteAddr	=	wordMemoryAddress + realitiveAddr;	//*	add the offset to the current address
   3f3f8:	c8 5d       	subi	r28, 0xD8	; 216
   3f3fa:	de 4f       	sbci	r29, 0xFE	; 254
   3f3fc:	a8 80       	ld	r10, Y
   3f3fe:	b9 80       	ldd	r11, Y+1	; 0x01
   3f400:	ca 80       	ldd	r12, Y+2	; 0x02
   3f402:	db 80       	ldd	r13, Y+3	; 0x03
   3f404:	c8 52       	subi	r28, 0x28	; 40
   3f406:	d1 40       	sbci	r29, 0x01	; 1
   3f408:	ae 0c       	add	r10, r14
   3f40a:	bf 1c       	adc	r11, r15
   3f40c:	c0 1e       	adc	r12, r16
   3f40e:	d1 1e       	adc	r13, r17
			absoluteAddr	=	absoluteAddr << 1;					//*	multiply by 2 for byte address
   3f410:	aa 0c       	add	r10, r10
   3f412:	bb 1c       	adc	r11, r11
   3f414:	cc 1c       	adc	r12, r12
   3f416:	dd 1c       	adc	r13, r13

			PrintFromPROGMEM(gTextMsg_rjmp, 0);
   3f418:	88 e1       	ldi	r24, 0x18	; 24
   3f41a:	92 ee       	ldi	r25, 0xE2	; 226
   3f41c:	60 e0       	ldi	r22, 0x00	; 0
   3f41e:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
			PrintHexByte((realitiveAddr >> 8) & 0x00ff);
   3f422:	bb 27       	eor	r27, r27
   3f424:	a1 2f       	mov	r26, r17
   3f426:	90 2f       	mov	r25, r16
   3f428:	8f 2d       	mov	r24, r15
   3f42a:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
			PrintHexByte((realitiveAddr) & 0x00ff);
   3f42e:	8e 2d       	mov	r24, r14
   3f430:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f434:	90 e2       	ldi	r25, 0x20	; 32
   3f436:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f43a:	80 91 c0 00 	lds	r24, 0x00C0
   3f43e:	86 ff       	sbrs	r24, 6
   3f440:	fc cf       	rjmp	.-8      	; 0x3f43a <main+0xa44>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f442:	80 91 c0 00 	lds	r24, 0x00C0
   3f446:	80 64       	ori	r24, 0x40	; 64
   3f448:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f44c:	ae e3       	ldi	r26, 0x3E	; 62
   3f44e:	a0 93 c6 00 	sts	0x00C6, r26
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f452:	80 91 c0 00 	lds	r24, 0x00C0
   3f456:	86 ff       	sbrs	r24, 6
   3f458:	fc cf       	rjmp	.-8      	; 0x3f452 <main+0xa5c>
   3f45a:	87 c0       	rjmp	.+270    	; 0x3f56a <main+0xb74>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
			PrintHexByte((absoluteAddr) & 0x00ff);
	
		}
		else if ((word1 & 0xfE0E) == 0x940c)
   3f45c:	2e e0       	ldi	r18, 0x0E	; 14
   3f45e:	3e ef       	ldi	r19, 0xFE	; 254
   3f460:	40 e0       	ldi	r20, 0x00	; 0
   3f462:	50 e0       	ldi	r21, 0x00	; 0
   3f464:	e2 22       	and	r14, r18
   3f466:	f3 22       	and	r15, r19
   3f468:	04 23       	and	r16, r20
   3f46a:	15 23       	and	r17, r21
   3f46c:	3c e0       	ldi	r19, 0x0C	; 12
   3f46e:	e3 16       	cp	r14, r19
   3f470:	34 e9       	ldi	r19, 0x94	; 148
   3f472:	f3 06       	cpc	r15, r19
   3f474:	30 e0       	ldi	r19, 0x00	; 0
   3f476:	03 07       	cpc	r16, r19
   3f478:	30 e0       	ldi	r19, 0x00	; 0
   3f47a:	13 07       	cpc	r17, r19
   3f47c:	09 f0       	breq	.+2      	; 0x3f480 <main+0xa8a>
   3f47e:	88 c0       	rjmp	.+272    	; 0x3f590 <main+0xb9a>
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   3f480:	c2 5d       	subi	r28, 0xD2	; 210
   3f482:	de 4f       	sbci	r29, 0xFE	; 254
   3f484:	48 81       	ld	r20, Y
   3f486:	ce 52       	subi	r28, 0x2E	; 46
   3f488:	d1 40       	sbci	r29, 0x01	; 1
   3f48a:	e4 2e       	mov	r14, r20
   3f48c:	ff 24       	eor	r15, r15
   3f48e:	00 e0       	ldi	r16, 0x00	; 0
   3f490:	10 e0       	ldi	r17, 0x00	; 0
   3f492:	10 2f       	mov	r17, r16
   3f494:	0f 2d       	mov	r16, r15
   3f496:	fe 2c       	mov	r15, r14
   3f498:	ee 24       	eor	r14, r14
   3f49a:	c3 5d       	subi	r28, 0xD3	; 211
   3f49c:	de 4f       	sbci	r29, 0xFE	; 254
   3f49e:	58 81       	ld	r21, Y
   3f4a0:	cd 52       	subi	r28, 0x2D	; 45
   3f4a2:	d1 40       	sbci	r29, 0x01	; 1
   3f4a4:	e5 0e       	add	r14, r21
   3f4a6:	f1 1c       	adc	r15, r1
   3f4a8:	01 1d       	adc	r16, r1
   3f4aa:	11 1d       	adc	r17, r1
   3f4ac:	d6 01       	movw	r26, r12
   3f4ae:	c5 01       	movw	r24, r10
   3f4b0:	81 70       	andi	r24, 0x01	; 1
   3f4b2:	90 70       	andi	r25, 0x00	; 0
   3f4b4:	a0 70       	andi	r26, 0x00	; 0
   3f4b6:	b0 70       	andi	r27, 0x00	; 0
   3f4b8:	dc 01       	movw	r26, r24
   3f4ba:	99 27       	eor	r25, r25
   3f4bc:	88 27       	eor	r24, r24
   3f4be:	e8 0e       	add	r14, r24
   3f4c0:	f9 1e       	adc	r15, r25
   3f4c2:	0a 1f       	adc	r16, r26
   3f4c4:	1b 1f       	adc	r17, r27
   3f4c6:	60 ef       	ldi	r22, 0xF0	; 240
   3f4c8:	70 e0       	ldi	r23, 0x00	; 0
   3f4ca:	80 e0       	ldi	r24, 0x00	; 0
   3f4cc:	90 e0       	ldi	r25, 0x00	; 0
   3f4ce:	a6 22       	and	r10, r22
   3f4d0:	b7 22       	and	r11, r23
   3f4d2:	c8 22       	and	r12, r24
   3f4d4:	d9 22       	and	r13, r25
   3f4d6:	f1 e1       	ldi	r31, 0x11	; 17
   3f4d8:	aa 0c       	add	r10, r10
   3f4da:	bb 1c       	adc	r11, r11
   3f4dc:	cc 1c       	adc	r12, r12
   3f4de:	dd 1c       	adc	r13, r13
   3f4e0:	fa 95       	dec	r31
   3f4e2:	d1 f7       	brne	.-12     	; 0x3f4d8 <main+0xae2>
   3f4e4:	ea 0c       	add	r14, r10
   3f4e6:	fb 1c       	adc	r15, r11
   3f4e8:	0c 1d       	adc	r16, r12
   3f4ea:	1d 1d       	adc	r17, r13
   3f4ec:	81 e0       	ldi	r24, 0x01	; 1
   3f4ee:	90 e0       	ldi	r25, 0x00	; 0
   3f4f0:	a0 e0       	ldi	r26, 0x00	; 0
   3f4f2:	b0 e0       	ldi	r27, 0x00	; 0
   3f4f4:	28 22       	and	r2, r24
   3f4f6:	39 22       	and	r3, r25
   3f4f8:	4a 22       	and	r4, r26
   3f4fa:	5b 22       	and	r5, r27
   3f4fc:	e5 e1       	ldi	r30, 0x15	; 21
   3f4fe:	22 0c       	add	r2, r2
   3f500:	33 1c       	adc	r3, r3
   3f502:	44 1c       	adc	r4, r4
   3f504:	55 1c       	adc	r5, r5
   3f506:	ea 95       	dec	r30
   3f508:	d1 f7       	brne	.-12     	; 0x3f4fe <main+0xb08>
   3f50a:	e2 0c       	add	r14, r2
   3f50c:	f3 1c       	adc	r15, r3
   3f50e:	04 1d       	adc	r16, r4
   3f510:	15 1d       	adc	r17, r5
								((byte1 & 0xf0) << 17) +
								((byte2 & 0x01) << 21) +
								word2;
							
			absoluteAddr	=	myFullAddress << 1;
   3f512:	57 01       	movw	r10, r14
   3f514:	68 01       	movw	r12, r16
   3f516:	aa 0c       	add	r10, r10
   3f518:	bb 1c       	adc	r11, r11
   3f51a:	cc 1c       	adc	r12, r12
   3f51c:	dd 1c       	adc	r13, r13
							
			PrintFromPROGMEM(gTextMsg_jmp, 0);
   3f51e:	8f e1       	ldi	r24, 0x1F	; 31
   3f520:	92 ee       	ldi	r25, 0xE2	; 226
   3f522:	60 e0       	ldi	r22, 0x00	; 0
   3f524:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
   3f528:	c8 01       	movw	r24, r16
   3f52a:	aa 27       	eor	r26, r26
   3f52c:	bb 27       	eor	r27, r27
   3f52e:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
   3f532:	bb 27       	eor	r27, r27
   3f534:	a1 2f       	mov	r26, r17
   3f536:	90 2f       	mov	r25, r16
   3f538:	8f 2d       	mov	r24, r15
   3f53a:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
			PrintHexByte((myFullAddress) & 0x00ff);
   3f53e:	8e 2d       	mov	r24, r14
   3f540:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f544:	90 e2       	ldi	r25, 0x20	; 32
   3f546:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f54a:	80 91 c0 00 	lds	r24, 0x00C0
   3f54e:	86 ff       	sbrs	r24, 6
   3f550:	fc cf       	rjmp	.-8      	; 0x3f54a <main+0xb54>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f552:	80 91 c0 00 	lds	r24, 0x00C0
   3f556:	80 64       	ori	r24, 0x40	; 64
   3f558:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f55c:	ae e3       	ldi	r26, 0x3E	; 62
   3f55e:	a0 93 c6 00 	sts	0x00C6, r26
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f562:	80 91 c0 00 	lds	r24, 0x00C0
   3f566:	86 ff       	sbrs	r24, 6
   3f568:	fc cf       	rjmp	.-8      	; 0x3f562 <main+0xb6c>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f56a:	80 91 c0 00 	lds	r24, 0x00C0
   3f56e:	80 64       	ori	r24, 0x40	; 64
   3f570:	80 93 c0 00 	sts	0x00C0, r24
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
			PrintHexByte((myFullAddress) & 0x00ff);
			sendchar(0x20);
			sendchar('>');
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
   3f574:	c6 01       	movw	r24, r12
   3f576:	aa 27       	eor	r26, r26
   3f578:	bb 27       	eor	r27, r27
   3f57a:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
   3f57e:	bb 27       	eor	r27, r27
   3f580:	ad 2d       	mov	r26, r13
   3f582:	9c 2d       	mov	r25, r12
   3f584:	8b 2d       	mov	r24, r11
   3f586:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
			PrintHexByte((absoluteAddr) & 0x00ff);
   3f58a:	8a 2d       	mov	r24, r10
   3f58c:	0f 94 7e f3 	call	0x3e6fc	; 0x3e6fc <PrintHexByte>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f590:	b0 e2       	ldi	r27, 0x20	; 32
   3f592:	b0 93 c6 00 	sts	0x00C6, r27
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f596:	80 91 c0 00 	lds	r24, 0x00C0
   3f59a:	86 ff       	sbrs	r24, 6
   3f59c:	fc cf       	rjmp	.-8      	; 0x3f596 <main+0xba0>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f59e:	80 91 c0 00 	lds	r24, 0x00C0
   3f5a2:	80 64       	ori	r24, 0x40	; 64
   3f5a4:	80 93 c0 00 	sts	0x00C0, r24
		}

	#if defined(_INTERRUPT_NAMES_DEFINED_)
		sendchar(0x20);
	#if (FLASHEND > 0x10000)
		stringPointer	=	pgm_read_word_far(&(gInterruptNameTable[vectorIndex]));
   3f5a8:	cc 5d       	subi	r28, 0xDC	; 220
   3f5aa:	de 4f       	sbci	r29, 0xFE	; 254
   3f5ac:	e8 81       	ld	r30, Y
   3f5ae:	f9 81       	ldd	r31, Y+1	; 0x01
   3f5b0:	c4 52       	subi	r28, 0x24	; 36
   3f5b2:	d1 40       	sbci	r29, 0x01	; 1
   3f5b4:	cf 01       	movw	r24, r30
   3f5b6:	aa 27       	eor	r26, r26
   3f5b8:	97 fd       	sbrc	r25, 7
   3f5ba:	a0 95       	com	r26
   3f5bc:	ba 2f       	mov	r27, r26
	#else
		stringPointer	=	pgm_read_word_near(&(gInterruptNameTable[vectorIndex]));
	#endif
		PrintFromPROGMEM((char *)stringPointer, 0);
   3f5be:	ab bf       	out	0x3b, r26	; 59
   3f5c0:	fc 01       	movw	r30, r24
   3f5c2:	87 91       	elpm	r24, Z+
   3f5c4:	96 91       	elpm	r25, Z+
   3f5c6:	60 e0       	ldi	r22, 0x00	; 0
   3f5c8:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
	#endif
		PrintNewLine();
   3f5cc:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>
   3f5d0:	cc 5d       	subi	r28, 0xDC	; 220
   3f5d2:	de 4f       	sbci	r29, 0xFE	; 254
   3f5d4:	08 81       	ld	r16, Y
   3f5d6:	19 81       	ldd	r17, Y+1	; 0x01
   3f5d8:	c4 52       	subi	r28, 0x24	; 36
   3f5da:	d1 40       	sbci	r29, 0x01	; 1
   3f5dc:	0e 5f       	subi	r16, 0xFE	; 254
   3f5de:	1f 4f       	sbci	r17, 0xFF	; 255
   3f5e0:	cc 5d       	subi	r28, 0xDC	; 220
   3f5e2:	de 4f       	sbci	r29, 0xFE	; 254
   3f5e4:	19 83       	std	Y+1, r17	; 0x01
   3f5e6:	08 83       	st	Y, r16
   3f5e8:	c4 52       	subi	r28, 0x24	; 36
   3f5ea:	d1 40       	sbci	r29, 0x01	; 1
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
   3f5ec:	ca 5d       	subi	r28, 0xDA	; 218
   3f5ee:	de 4f       	sbci	r29, 0xFE	; 254
   3f5f0:	28 81       	ld	r18, Y
   3f5f2:	39 81       	ldd	r19, Y+1	; 0x01
   3f5f4:	c6 52       	subi	r28, 0x26	; 38
   3f5f6:	d1 40       	sbci	r29, 0x01	; 1
   3f5f8:	29 33       	cpi	r18, 0x39	; 57
   3f5fa:	31 05       	cpc	r19, r1
   3f5fc:	09 f4       	brne	.+2      	; 0x3f600 <main+0xc0a>
   3f5fe:	13 cb       	rjmp	.-2522   	; 0x3ec26 <main+0x230>
   3f600:	44 e0       	ldi	r20, 0x04	; 4
   3f602:	50 e0       	ldi	r21, 0x00	; 0
   3f604:	60 e0       	ldi	r22, 0x00	; 0
   3f606:	70 e0       	ldi	r23, 0x00	; 0
   3f608:	64 0e       	add	r6, r20
   3f60a:	75 1e       	adc	r7, r21
   3f60c:	86 1e       	adc	r8, r22
   3f60e:	97 1e       	adc	r9, r23
   3f610:	c5 cd       	rjmp	.-1142   	; 0x3f19c <main+0x7a6>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
				VectorDisplay();
				break;

			case 'Y':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 2);
   3f612:	80 e3       	ldi	r24, 0x30	; 48
   3f614:	93 ee       	ldi	r25, 0xE3	; 227
   3f616:	62 e0       	ldi	r22, 0x02	; 2
   3f618:	0f 94 66 f3 	call	0x3e6cc	; 0x3e6cc <PrintFromPROGMEMln>
static void	AVR_PortOutput(void)
{
char	portLetter;
char	getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);
   3f61c:	84 e2       	ldi	r24, 0x24	; 36
   3f61e:	92 ee       	ldi	r25, 0xE2	; 226
   3f620:	60 e0       	ldi	r22, 0x00	; 0
   3f622:	0f 94 2f f3 	call	0x3e65e	; 0x3e65e <PrintFromPROGMEM>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3f626:	80 91 c0 00 	lds	r24, 0x00C0
   3f62a:	87 ff       	sbrs	r24, 7
   3f62c:	fc cf       	rjmp	.-8      	; 0x3f626 <main+0xc30>
	{
		// wait for data
	}
	return UART_DATA_REG;
   3f62e:	10 91 c6 00 	lds	r17, 0x00C6
char	getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);

	portLetter	=	recchar();
	portLetter	=	portLetter & 0x5f;
   3f632:	1f 75       	andi	r17, 0x5F	; 95
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3f634:	10 93 c6 00 	sts	0x00C6, r17
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3f638:	80 91 c0 00 	lds	r24, 0x00C0
   3f63c:	86 ff       	sbrs	r24, 6
   3f63e:	fc cf       	rjmp	.-8      	; 0x3f638 <main+0xc42>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3f640:	80 91 c0 00 	lds	r24, 0x00C0
   3f644:	80 64       	ori	r24, 0x40	; 64
   3f646:	80 93 c0 00 	sts	0x00C0, r24
	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);

	portLetter	=	recchar();
	portLetter	=	portLetter & 0x5f;
	sendchar(portLetter);
	PrintNewLine();
   3f64a:	0f 94 4d f3 	call	0x3e69a	; 0x3e69a <PrintNewLine>

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
   3f64e:	81 2f       	mov	r24, r17
   3f650:	81 54       	subi	r24, 0x41	; 65
   3f652:	8a 31       	cpi	r24, 0x1A	; 26
   3f654:	08 f0       	brcs	.+2      	; 0x3f658 <main+0xc62>
   3f656:	36 c1       	rjmp	.+620    	; 0x3f8c4 <main+0xece>
	{
		getCharFlag	=	true;
		switch(portLetter)
   3f658:	16 34       	cpi	r17, 0x46	; 70
   3f65a:	09 f4       	brne	.+2      	; 0x3f65e <main+0xc68>
   3f65c:	95 c0       	rjmp	.+298    	; 0x3f788 <main+0xd92>
   3f65e:	17 34       	cpi	r17, 0x47	; 71
   3f660:	90 f4       	brcc	.+36     	; 0x3f686 <main+0xc90>
   3f662:	13 34       	cpi	r17, 0x43	; 67
   3f664:	09 f4       	brne	.+2      	; 0x3f668 <main+0xc72>
   3f666:	4e c0       	rjmp	.+156    	; 0x3f704 <main+0xd0e>
   3f668:	14 34       	cpi	r17, 0x44	; 68
   3f66a:	30 f4       	brcc	.+12     	; 0x3f678 <main+0xc82>
   3f66c:	11 34       	cpi	r17, 0x41	; 65
   3f66e:	f1 f0       	breq	.+60     	; 0x3f6ac <main+0xcb6>
   3f670:	12 34       	cpi	r17, 0x42	; 66
   3f672:	09 f0       	breq	.+2      	; 0x3f676 <main+0xc80>
   3f674:	1d c1       	rjmp	.+570    	; 0x3f8b0 <main+0xeba>
   3f676:	30 c0       	rjmp	.+96     	; 0x3f6d8 <main+0xce2>
   3f678:	14 34       	cpi	r17, 0x44	; 68
   3f67a:	09 f4       	brne	.+2      	; 0x3f67e <main+0xc88>
   3f67c:	59 c0       	rjmp	.+178    	; 0x3f730 <main+0xd3a>
   3f67e:	15 34       	cpi	r17, 0x45	; 69
   3f680:	09 f0       	breq	.+2      	; 0x3f684 <main+0xc8e>
   3f682:	16 c1       	rjmp	.+556    	; 0x3f8b0 <main+0xeba>
   3f684:	6b c0       	rjmp	.+214    	; 0x3f75c <main+0xd66>
   3f686:	1a 34       	cpi	r17, 0x4A	; 74
   3f688:	09 f4       	brne	.+2      	; 0x3f68c <main+0xc96>
   3f68a:	c4 c0       	rjmp	.+392    	; 0x3f814 <main+0xe1e>
   3f68c:	1b 34       	cpi	r17, 0x4B	; 75
   3f68e:	38 f4       	brcc	.+14     	; 0x3f69e <main+0xca8>
   3f690:	17 34       	cpi	r17, 0x47	; 71
   3f692:	09 f4       	brne	.+2      	; 0x3f696 <main+0xca0>
   3f694:	8f c0       	rjmp	.+286    	; 0x3f7b4 <main+0xdbe>
   3f696:	18 34       	cpi	r17, 0x48	; 72
   3f698:	09 f0       	breq	.+2      	; 0x3f69c <main+0xca6>
   3f69a:	0a c1       	rjmp	.+532    	; 0x3f8b0 <main+0xeba>
   3f69c:	a1 c0       	rjmp	.+322    	; 0x3f7e0 <main+0xdea>
   3f69e:	1b 34       	cpi	r17, 0x4B	; 75
   3f6a0:	09 f4       	brne	.+2      	; 0x3f6a4 <main+0xcae>
   3f6a2:	d2 c0       	rjmp	.+420    	; 0x3f848 <main+0xe52>
   3f6a4:	1c 34       	cpi	r17, 0x4C	; 76
   3f6a6:	09 f0       	breq	.+2      	; 0x3f6aa <main+0xcb4>
   3f6a8:	03 c1       	rjmp	.+518    	; 0x3f8b0 <main+0xeba>
   3f6aa:	e8 c0       	rjmp	.+464    	; 0x3f87c <main+0xe86>
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
   3f6ac:	8f ef       	ldi	r24, 0xFF	; 255
   3f6ae:	81 b9       	out	0x01, r24	; 1
   3f6b0:	0d c0       	rjmp	.+26     	; 0x3f6cc <main+0xcd6>
				while (!Serial_Available())
				{
					PORTA	^=	0xff;
   3f6b2:	82 b1       	in	r24, 0x02	; 2
   3f6b4:	80 95       	com	r24
   3f6b6:	82 b9       	out	0x02, r24	; 2
   3f6b8:	80 e0       	ldi	r24, 0x00	; 0
   3f6ba:	90 e0       	ldi	r25, 0x00	; 0
   3f6bc:	e0 ed       	ldi	r30, 0xD0	; 208
   3f6be:	f7 e0       	ldi	r31, 0x07	; 7
   3f6c0:	31 97       	sbiw	r30, 0x01	; 1
   3f6c2:	f1 f7       	brne	.-4      	; 0x3f6c0 <main+0xcca>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f6c4:	01 96       	adiw	r24, 0x01	; 1
   3f6c6:	88 3c       	cpi	r24, 0xC8	; 200
   3f6c8:	91 05       	cpc	r25, r1
   3f6ca:	c1 f7       	brne	.-16     	; 0x3f6bc <main+0xcc6>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f6cc:	80 91 c0 00 	lds	r24, 0x00C0
		switch(portLetter)
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
				while (!Serial_Available())
   3f6d0:	87 ff       	sbrs	r24, 7
   3f6d2:	ef cf       	rjmp	.-34     	; 0x3f6b2 <main+0xcbc>
				{
					PORTA	^=	0xff;
					delay_ms(200);
				}
				PORTA	=	0;
   3f6d4:	12 b8       	out	0x02, r1	; 2
   3f6d6:	ef c0       	rjmp	.+478    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
   3f6d8:	8f ef       	ldi	r24, 0xFF	; 255
   3f6da:	84 b9       	out	0x04, r24	; 4
   3f6dc:	0d c0       	rjmp	.+26     	; 0x3f6f8 <main+0xd02>
				while (!Serial_Available())
				{
					PORTB	^=	0xff;
   3f6de:	85 b1       	in	r24, 0x05	; 5
   3f6e0:	80 95       	com	r24
   3f6e2:	85 b9       	out	0x05, r24	; 5
   3f6e4:	80 e0       	ldi	r24, 0x00	; 0
   3f6e6:	90 e0       	ldi	r25, 0x00	; 0
   3f6e8:	e0 ed       	ldi	r30, 0xD0	; 208
   3f6ea:	f7 e0       	ldi	r31, 0x07	; 7
   3f6ec:	31 97       	sbiw	r30, 0x01	; 1
   3f6ee:	f1 f7       	brne	.-4      	; 0x3f6ec <main+0xcf6>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f6f0:	01 96       	adiw	r24, 0x01	; 1
   3f6f2:	88 3c       	cpi	r24, 0xC8	; 200
   3f6f4:	91 05       	cpc	r25, r1
   3f6f6:	c1 f7       	brne	.-16     	; 0x3f6e8 <main+0xcf2>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f6f8:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
				while (!Serial_Available())
   3f6fc:	87 ff       	sbrs	r24, 7
   3f6fe:	ef cf       	rjmp	.-34     	; 0x3f6de <main+0xce8>
				{
					PORTB	^=	0xff;
					delay_ms(200);
				}
				PORTB	=	0;
   3f700:	15 b8       	out	0x05, r1	; 5
   3f702:	d9 c0       	rjmp	.+434    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
   3f704:	8f ef       	ldi	r24, 0xFF	; 255
   3f706:	87 b9       	out	0x07, r24	; 7
   3f708:	0d c0       	rjmp	.+26     	; 0x3f724 <main+0xd2e>
				while (!Serial_Available())
				{
					PORTC	^=	0xff;
   3f70a:	88 b1       	in	r24, 0x08	; 8
   3f70c:	80 95       	com	r24
   3f70e:	88 b9       	out	0x08, r24	; 8
   3f710:	80 e0       	ldi	r24, 0x00	; 0
   3f712:	90 e0       	ldi	r25, 0x00	; 0
   3f714:	e0 ed       	ldi	r30, 0xD0	; 208
   3f716:	f7 e0       	ldi	r31, 0x07	; 7
   3f718:	31 97       	sbiw	r30, 0x01	; 1
   3f71a:	f1 f7       	brne	.-4      	; 0x3f718 <main+0xd22>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f71c:	01 96       	adiw	r24, 0x01	; 1
   3f71e:	88 3c       	cpi	r24, 0xC8	; 200
   3f720:	91 05       	cpc	r25, r1
   3f722:	c1 f7       	brne	.-16     	; 0x3f714 <main+0xd1e>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f724:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
				while (!Serial_Available())
   3f728:	87 ff       	sbrs	r24, 7
   3f72a:	ef cf       	rjmp	.-34     	; 0x3f70a <main+0xd14>
				{
					PORTC	^=	0xff;
					delay_ms(200);
				}
				PORTC	=	0;
   3f72c:	18 b8       	out	0x08, r1	; 8
   3f72e:	c3 c0       	rjmp	.+390    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
   3f730:	8f ef       	ldi	r24, 0xFF	; 255
   3f732:	8a b9       	out	0x0a, r24	; 10
   3f734:	0d c0       	rjmp	.+26     	; 0x3f750 <main+0xd5a>
				while (!Serial_Available())
				{
					PORTD	^=	0xff;
   3f736:	8b b1       	in	r24, 0x0b	; 11
   3f738:	80 95       	com	r24
   3f73a:	8b b9       	out	0x0b, r24	; 11
   3f73c:	80 e0       	ldi	r24, 0x00	; 0
   3f73e:	90 e0       	ldi	r25, 0x00	; 0
   3f740:	e0 ed       	ldi	r30, 0xD0	; 208
   3f742:	f7 e0       	ldi	r31, 0x07	; 7
   3f744:	31 97       	sbiw	r30, 0x01	; 1
   3f746:	f1 f7       	brne	.-4      	; 0x3f744 <main+0xd4e>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f748:	01 96       	adiw	r24, 0x01	; 1
   3f74a:	88 3c       	cpi	r24, 0xC8	; 200
   3f74c:	91 05       	cpc	r25, r1
   3f74e:	c1 f7       	brne	.-16     	; 0x3f740 <main+0xd4a>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f750:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
				while (!Serial_Available())
   3f754:	87 ff       	sbrs	r24, 7
   3f756:	ef cf       	rjmp	.-34     	; 0x3f736 <main+0xd40>
				{
					PORTD	^=	0xff;
					delay_ms(200);
				}
				PORTD	=	0;
   3f758:	1b b8       	out	0x0b, r1	; 11
   3f75a:	ad c0       	rjmp	.+346    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
   3f75c:	8f ef       	ldi	r24, 0xFF	; 255
   3f75e:	8d b9       	out	0x0d, r24	; 13
   3f760:	0d c0       	rjmp	.+26     	; 0x3f77c <main+0xd86>
				while (!Serial_Available())
				{
					PORTE	^=	0xff;
   3f762:	8e b1       	in	r24, 0x0e	; 14
   3f764:	80 95       	com	r24
   3f766:	8e b9       	out	0x0e, r24	; 14
   3f768:	80 e0       	ldi	r24, 0x00	; 0
   3f76a:	90 e0       	ldi	r25, 0x00	; 0
   3f76c:	e0 ed       	ldi	r30, 0xD0	; 208
   3f76e:	f7 e0       	ldi	r31, 0x07	; 7
   3f770:	31 97       	sbiw	r30, 0x01	; 1
   3f772:	f1 f7       	brne	.-4      	; 0x3f770 <main+0xd7a>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f774:	01 96       	adiw	r24, 0x01	; 1
   3f776:	88 3c       	cpi	r24, 0xC8	; 200
   3f778:	91 05       	cpc	r25, r1
   3f77a:	c1 f7       	brne	.-16     	; 0x3f76c <main+0xd76>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f77c:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
				while (!Serial_Available())
   3f780:	87 ff       	sbrs	r24, 7
   3f782:	ef cf       	rjmp	.-34     	; 0x3f762 <main+0xd6c>
				{
					PORTE	^=	0xff;
					delay_ms(200);
				}
				PORTE	=	0;
   3f784:	1e b8       	out	0x0e, r1	; 14
   3f786:	97 c0       	rjmp	.+302    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
   3f788:	8f ef       	ldi	r24, 0xFF	; 255
   3f78a:	80 bb       	out	0x10, r24	; 16
   3f78c:	0d c0       	rjmp	.+26     	; 0x3f7a8 <main+0xdb2>
				while (!Serial_Available())
				{
					PORTF	^=	0xff;
   3f78e:	81 b3       	in	r24, 0x11	; 17
   3f790:	80 95       	com	r24
   3f792:	81 bb       	out	0x11, r24	; 17
   3f794:	80 e0       	ldi	r24, 0x00	; 0
   3f796:	90 e0       	ldi	r25, 0x00	; 0
   3f798:	e0 ed       	ldi	r30, 0xD0	; 208
   3f79a:	f7 e0       	ldi	r31, 0x07	; 7
   3f79c:	31 97       	sbiw	r30, 0x01	; 1
   3f79e:	f1 f7       	brne	.-4      	; 0x3f79c <main+0xda6>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f7a0:	01 96       	adiw	r24, 0x01	; 1
   3f7a2:	88 3c       	cpi	r24, 0xC8	; 200
   3f7a4:	91 05       	cpc	r25, r1
   3f7a6:	c1 f7       	brne	.-16     	; 0x3f798 <main+0xda2>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f7a8:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
				while (!Serial_Available())
   3f7ac:	87 ff       	sbrs	r24, 7
   3f7ae:	ef cf       	rjmp	.-34     	; 0x3f78e <main+0xd98>
				{
					PORTF	^=	0xff;
					delay_ms(200);
				}
				PORTF	=	0;
   3f7b0:	11 ba       	out	0x11, r1	; 17
   3f7b2:	81 c0       	rjmp	.+258    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
   3f7b4:	8f ef       	ldi	r24, 0xFF	; 255
   3f7b6:	83 bb       	out	0x13, r24	; 19
   3f7b8:	0d c0       	rjmp	.+26     	; 0x3f7d4 <main+0xdde>
				while (!Serial_Available())
				{
					PORTG	^=	0xff;
   3f7ba:	84 b3       	in	r24, 0x14	; 20
   3f7bc:	80 95       	com	r24
   3f7be:	84 bb       	out	0x14, r24	; 20
   3f7c0:	80 e0       	ldi	r24, 0x00	; 0
   3f7c2:	90 e0       	ldi	r25, 0x00	; 0
   3f7c4:	e0 ed       	ldi	r30, 0xD0	; 208
   3f7c6:	f7 e0       	ldi	r31, 0x07	; 7
   3f7c8:	31 97       	sbiw	r30, 0x01	; 1
   3f7ca:	f1 f7       	brne	.-4      	; 0x3f7c8 <main+0xdd2>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f7cc:	01 96       	adiw	r24, 0x01	; 1
   3f7ce:	88 3c       	cpi	r24, 0xC8	; 200
   3f7d0:	91 05       	cpc	r25, r1
   3f7d2:	c1 f7       	brne	.-16     	; 0x3f7c4 <main+0xdce>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f7d4:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
				while (!Serial_Available())
   3f7d8:	87 ff       	sbrs	r24, 7
   3f7da:	ef cf       	rjmp	.-34     	; 0x3f7ba <main+0xdc4>
				{
					PORTG	^=	0xff;
					delay_ms(200);
				}
				PORTG	=	0;
   3f7dc:	14 ba       	out	0x14, r1	; 20
   3f7de:	6b c0       	rjmp	.+214    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
   3f7e0:	8f ef       	ldi	r24, 0xFF	; 255
   3f7e2:	80 93 01 01 	sts	0x0101, r24
   3f7e6:	0f c0       	rjmp	.+30     	; 0x3f806 <main+0xe10>
				while (!Serial_Available())
				{
					PORTH	^=	0xff;
   3f7e8:	80 91 02 01 	lds	r24, 0x0102
   3f7ec:	80 95       	com	r24
   3f7ee:	80 93 02 01 	sts	0x0102, r24
   3f7f2:	80 e0       	ldi	r24, 0x00	; 0
   3f7f4:	90 e0       	ldi	r25, 0x00	; 0
   3f7f6:	e0 ed       	ldi	r30, 0xD0	; 208
   3f7f8:	f7 e0       	ldi	r31, 0x07	; 7
   3f7fa:	31 97       	sbiw	r30, 0x01	; 1
   3f7fc:	f1 f7       	brne	.-4      	; 0x3f7fa <main+0xe04>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f7fe:	01 96       	adiw	r24, 0x01	; 1
   3f800:	88 3c       	cpi	r24, 0xC8	; 200
   3f802:	91 05       	cpc	r25, r1
   3f804:	c1 f7       	brne	.-16     	; 0x3f7f6 <main+0xe00>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f806:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
				while (!Serial_Available())
   3f80a:	87 ff       	sbrs	r24, 7
   3f80c:	ed cf       	rjmp	.-38     	; 0x3f7e8 <main+0xdf2>
				{
					PORTH	^=	0xff;
					delay_ms(200);
				}
				PORTH	=	0;
   3f80e:	10 92 02 01 	sts	0x0102, r1
   3f812:	51 c0       	rjmp	.+162    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
   3f814:	8f ef       	ldi	r24, 0xFF	; 255
   3f816:	80 93 04 01 	sts	0x0104, r24
   3f81a:	0f c0       	rjmp	.+30     	; 0x3f83a <main+0xe44>
				while (!Serial_Available())
				{
					PORTJ	^=	0xff;
   3f81c:	80 91 05 01 	lds	r24, 0x0105
   3f820:	80 95       	com	r24
   3f822:	80 93 05 01 	sts	0x0105, r24
   3f826:	80 e0       	ldi	r24, 0x00	; 0
   3f828:	90 e0       	ldi	r25, 0x00	; 0
   3f82a:	e0 ed       	ldi	r30, 0xD0	; 208
   3f82c:	f7 e0       	ldi	r31, 0x07	; 7
   3f82e:	31 97       	sbiw	r30, 0x01	; 1
   3f830:	f1 f7       	brne	.-4      	; 0x3f82e <main+0xe38>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f832:	01 96       	adiw	r24, 0x01	; 1
   3f834:	88 3c       	cpi	r24, 0xC8	; 200
   3f836:	91 05       	cpc	r25, r1
   3f838:	c1 f7       	brne	.-16     	; 0x3f82a <main+0xe34>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f83a:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
				while (!Serial_Available())
   3f83e:	87 ff       	sbrs	r24, 7
   3f840:	ed cf       	rjmp	.-38     	; 0x3f81c <main+0xe26>
				{
					PORTJ	^=	0xff;
					delay_ms(200);
				}
				PORTJ	=	0;
   3f842:	10 92 05 01 	sts	0x0105, r1
   3f846:	37 c0       	rjmp	.+110    	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
   3f848:	8f ef       	ldi	r24, 0xFF	; 255
   3f84a:	80 93 07 01 	sts	0x0107, r24
   3f84e:	0f c0       	rjmp	.+30     	; 0x3f86e <main+0xe78>
				while (!Serial_Available())
				{
					PORTK	^=	0xff;
   3f850:	80 91 08 01 	lds	r24, 0x0108
   3f854:	80 95       	com	r24
   3f856:	80 93 08 01 	sts	0x0108, r24
   3f85a:	80 e0       	ldi	r24, 0x00	; 0
   3f85c:	90 e0       	ldi	r25, 0x00	; 0
   3f85e:	e0 ed       	ldi	r30, 0xD0	; 208
   3f860:	f7 e0       	ldi	r31, 0x07	; 7
   3f862:	31 97       	sbiw	r30, 0x01	; 1
   3f864:	f1 f7       	brne	.-4      	; 0x3f862 <main+0xe6c>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f866:	01 96       	adiw	r24, 0x01	; 1
   3f868:	88 3c       	cpi	r24, 0xC8	; 200
   3f86a:	91 05       	cpc	r25, r1
   3f86c:	c1 f7       	brne	.-16     	; 0x3f85e <main+0xe68>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f86e:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
				while (!Serial_Available())
   3f872:	87 ff       	sbrs	r24, 7
   3f874:	ed cf       	rjmp	.-38     	; 0x3f850 <main+0xe5a>
				{
					PORTK	^=	0xff;
					delay_ms(200);
				}
				PORTK	=	0;
   3f876:	10 92 08 01 	sts	0x0108, r1
   3f87a:	1d c0       	rjmp	.+58     	; 0x3f8b6 <main+0xec0>
				break;
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
   3f87c:	8f ef       	ldi	r24, 0xFF	; 255
   3f87e:	80 93 0a 01 	sts	0x010A, r24
   3f882:	0f c0       	rjmp	.+30     	; 0x3f8a2 <main+0xeac>
				while (!Serial_Available())
				{
					PORTL	^=	0xff;
   3f884:	80 91 0b 01 	lds	r24, 0x010B
   3f888:	80 95       	com	r24
   3f88a:	80 93 0b 01 	sts	0x010B, r24
   3f88e:	80 e0       	ldi	r24, 0x00	; 0
   3f890:	90 e0       	ldi	r25, 0x00	; 0
   3f892:	e0 ed       	ldi	r30, 0xD0	; 208
   3f894:	f7 e0       	ldi	r31, 0x07	; 7
   3f896:	31 97       	sbiw	r30, 0x01	; 1
   3f898:	f1 f7       	brne	.-4      	; 0x3f896 <main+0xea0>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3f89a:	01 96       	adiw	r24, 0x01	; 1
   3f89c:	88 3c       	cpi	r24, 0xC8	; 200
   3f89e:	91 05       	cpc	r25, r1
   3f8a0:	c1 f7       	brne	.-16     	; 0x3f892 <main+0xe9c>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f8a2:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
				while (!Serial_Available())
   3f8a6:	87 ff       	sbrs	r24, 7
   3f8a8:	ed cf       	rjmp	.-38     	; 0x3f884 <main+0xe8e>
				{
					PORTL	^=	0xff;
					delay_ms(200);
				}
				PORTL	=	0;
   3f8aa:	10 92 0b 01 	sts	0x010B, r1
   3f8ae:	03 c0       	rjmp	.+6      	; 0x3f8b6 <main+0xec0>
				break;
		#endif

			default:
				PrintFromPROGMEMln(gTextMsg_PortNotSupported, 0);
   3f8b0:	8f e2       	ldi	r24, 0x2F	; 47
   3f8b2:	92 ee       	ldi	r25, 0xE2	; 226
   3f8b4:	b5 c9       	rjmp	.-3222   	; 0x3ec20 <main+0x22a>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3f8b6:	80 91 c0 00 	lds	r24, 0x00C0
   3f8ba:	87 ff       	sbrs	r24, 7
   3f8bc:	fc cf       	rjmp	.-8      	; 0x3f8b6 <main+0xec0>
	{
		// wait for data
	}
	return UART_DATA_REG;
   3f8be:	80 91 c6 00 	lds	r24, 0x00C6
   3f8c2:	b1 c9       	rjmp	.-3230   	; 0x3ec26 <main+0x230>
			recchar();
		}
	}
	else
	{
		PrintFromPROGMEMln(gTextMsg_MustBeLetter, 0);
   3f8c4:	82 e4       	ldi	r24, 0x42	; 66
   3f8c6:	92 ee       	ldi	r25, 0xE2	; 226
   3f8c8:	ab c9       	rjmp	.-3242   	; 0x3ec20 <main+0x22a>
				//*	do nothing
				break;
	 	#endif
	 	
			default:
				PrintFromPROGMEMln(gTextMsg_HUH, 0);
   3f8ca:	8c e1       	ldi	r24, 0x1C	; 28
   3f8cc:	91 ee       	ldi	r25, 0xE1	; 225
   3f8ce:	a8 c9       	rjmp	.-3248   	; 0x3ec20 <main+0x22a>
   3f8d0:	aa 24       	eor	r10, r10
   3f8d2:	bb 24       	eor	r11, r11
				{
					exPointCntr	=	0;
				}
			#endif

				switch (msgParseState)
   3f8d4:	93 30       	cpi	r25, 0x03	; 3
   3f8d6:	61 f1       	breq	.+88     	; 0x3f930 <main+0xf3a>
   3f8d8:	94 30       	cpi	r25, 0x04	; 4
   3f8da:	28 f4       	brcc	.+10     	; 0x3f8e6 <main+0xef0>
   3f8dc:	91 30       	cpi	r25, 0x01	; 1
   3f8de:	89 f0       	breq	.+34     	; 0x3f902 <main+0xf0c>
   3f8e0:	92 30       	cpi	r25, 0x02	; 2
   3f8e2:	08 f5       	brcc	.+66     	; 0x3f926 <main+0xf30>
   3f8e4:	08 c0       	rjmp	.+16     	; 0x3f8f6 <main+0xf00>
   3f8e6:	95 30       	cpi	r25, 0x05	; 5
   3f8e8:	b1 f1       	breq	.+108    	; 0x3f956 <main+0xf60>
   3f8ea:	95 30       	cpi	r25, 0x05	; 5
   3f8ec:	40 f1       	brcs	.+80     	; 0x3f93e <main+0xf48>
   3f8ee:	96 30       	cpi	r25, 0x06	; 6
   3f8f0:	09 f0       	breq	.+2      	; 0x3f8f4 <main+0xefe>
   3f8f2:	53 c0       	rjmp	.+166    	; 0x3f99a <main+0xfa4>
   3f8f4:	4e c0       	rjmp	.+156    	; 0x3f992 <main+0xf9c>
				{
					case ST_START:
						if ( c == MESSAGE_START )
   3f8f6:	2b 31       	cpi	r18, 0x1B	; 27
   3f8f8:	09 f0       	breq	.+2      	; 0x3f8fc <main+0xf06>
   3f8fa:	1c c9       	rjmp	.-3528   	; 0x3eb34 <main+0x13e>
   3f8fc:	91 e0       	ldi	r25, 0x01	; 1
   3f8fe:	6b e1       	ldi	r22, 0x1B	; 27
   3f900:	19 c9       	rjmp	.-3534   	; 0x3eb34 <main+0x13e>
							checksum		=	MESSAGE_START^0;
						}
						break;

					case ST_GET_SEQ_NUM:
						if ( (c == 1) || (c == seqNum) )
   3f902:	21 30       	cpi	r18, 0x01	; 1
   3f904:	41 f0       	breq	.+16     	; 0x3f916 <main+0xf20>
   3f906:	c1 5d       	subi	r28, 0xD1	; 209
   3f908:	de 4f       	sbci	r29, 0xFE	; 254
   3f90a:	58 81       	ld	r21, Y
   3f90c:	cf 52       	subi	r28, 0x2F	; 47
   3f90e:	d1 40       	sbci	r29, 0x01	; 1
   3f910:	25 17       	cp	r18, r21
   3f912:	09 f0       	breq	.+2      	; 0x3f916 <main+0xf20>
   3f914:	02 c3       	rjmp	.+1540   	; 0x3ff1a <main+0x1524>
						{
							seqNum			=	c;
							msgParseState	=	ST_MSG_SIZE_1;
							checksum		^=	c;
   3f916:	62 27       	eor	r22, r18
   3f918:	c1 5d       	subi	r28, 0xD1	; 209
   3f91a:	de 4f       	sbci	r29, 0xFE	; 254
   3f91c:	28 83       	st	Y, r18
   3f91e:	cf 52       	subi	r28, 0x2F	; 47
   3f920:	d1 40       	sbci	r29, 0x01	; 1
   3f922:	92 e0       	ldi	r25, 0x02	; 2
   3f924:	07 c9       	rjmp	.-3570   	; 0x3eb34 <main+0x13e>
							msgParseState	=	ST_START;
						}
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
   3f926:	b2 2f       	mov	r27, r18
   3f928:	a0 e0       	ldi	r26, 0x00	; 0
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
   3f92a:	62 27       	eor	r22, r18
   3f92c:	93 e0       	ldi	r25, 0x03	; 3
   3f92e:	02 c9       	rjmp	.-3580   	; 0x3eb34 <main+0x13e>
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
   3f930:	82 2f       	mov	r24, r18
   3f932:	90 e0       	ldi	r25, 0x00	; 0
   3f934:	a8 2b       	or	r26, r24
   3f936:	b9 2b       	or	r27, r25
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
   3f938:	62 27       	eor	r22, r18
   3f93a:	94 e0       	ldi	r25, 0x04	; 4
   3f93c:	fb c8       	rjmp	.-3594   	; 0x3eb34 <main+0x13e>
						break;

					case ST_GET_TOKEN:
						if ( c == TOKEN )
   3f93e:	2e 30       	cpi	r18, 0x0E	; 14
   3f940:	09 f0       	breq	.+2      	; 0x3f944 <main+0xf4e>
   3f942:	eb c2       	rjmp	.+1494   	; 0x3ff1a <main+0x1524>
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
   3f944:	62 27       	eor	r22, r18
   3f946:	95 e0       	ldi	r25, 0x05	; 5
   3f948:	c0 5d       	subi	r28, 0xD0	; 208
   3f94a:	de 4f       	sbci	r29, 0xFE	; 254
   3f94c:	19 82       	std	Y+1, r1	; 0x01
   3f94e:	18 82       	st	Y, r1
   3f950:	c0 53       	subi	r28, 0x30	; 48
   3f952:	d1 40       	sbci	r29, 0x01	; 1
   3f954:	ef c8       	rjmp	.-3618   	; 0x3eb34 <main+0x13e>
							msgParseState	=	ST_START;
						}
						break;

					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
   3f956:	e1 e0       	ldi	r30, 0x01	; 1
   3f958:	f0 e0       	ldi	r31, 0x00	; 0
   3f95a:	ec 0f       	add	r30, r28
   3f95c:	fd 1f       	adc	r31, r29
   3f95e:	c0 5d       	subi	r28, 0xD0	; 208
   3f960:	de 4f       	sbci	r29, 0xFE	; 254
   3f962:	e8 80       	ld	r14, Y
   3f964:	f9 80       	ldd	r15, Y+1	; 0x01
   3f966:	c0 53       	subi	r28, 0x30	; 48
   3f968:	d1 40       	sbci	r29, 0x01	; 1
   3f96a:	ee 0d       	add	r30, r14
   3f96c:	ff 1d       	adc	r31, r15
   3f96e:	20 83       	st	Z, r18
   3f970:	87 01       	movw	r16, r14
   3f972:	0f 5f       	subi	r16, 0xFF	; 255
   3f974:	1f 4f       	sbci	r17, 0xFF	; 255
   3f976:	c0 5d       	subi	r28, 0xD0	; 208
   3f978:	de 4f       	sbci	r29, 0xFE	; 254
   3f97a:	19 83       	std	Y+1, r17	; 0x01
   3f97c:	08 83       	st	Y, r16
   3f97e:	c0 53       	subi	r28, 0x30	; 48
   3f980:	d1 40       	sbci	r29, 0x01	; 1
						checksum		^=	c;
   3f982:	62 27       	eor	r22, r18
						if (ii == msgLength )
   3f984:	0a 17       	cp	r16, r26
   3f986:	1b 07       	cpc	r17, r27
   3f988:	09 f0       	breq	.+2      	; 0x3f98c <main+0xf96>
   3f98a:	d4 c8       	rjmp	.-3672   	; 0x3eb34 <main+0x13e>
   3f98c:	d8 01       	movw	r26, r16
   3f98e:	96 e0       	ldi	r25, 0x06	; 6
   3f990:	d1 c8       	rjmp	.-3678   	; 0x3eb34 <main+0x13e>
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   3f992:	26 17       	cp	r18, r22
   3f994:	09 f0       	breq	.+2      	; 0x3f998 <main+0xfa2>
   3f996:	c1 c2       	rjmp	.+1410   	; 0x3ff1a <main+0x1524>
   3f998:	03 c0       	rjmp	.+6      	; 0x3f9a0 <main+0xfaa>
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   3f99a:	97 30       	cpi	r25, 0x07	; 7
   3f99c:	09 f0       	breq	.+2      	; 0x3f9a0 <main+0xfaa>
   3f99e:	ca c8       	rjmp	.-3692   	; 0x3eb34 <main+0x13e>
   3f9a0:	99 24       	eor	r9, r9

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   3f9a2:	89 81       	ldd	r24, Y+1	; 0x01
   3f9a4:	83 31       	cpi	r24, 0x13	; 19
   3f9a6:	09 f4       	brne	.+2      	; 0x3f9aa <main+0xfb4>
   3f9a8:	fc c0       	rjmp	.+504    	; 0x3fba2 <main+0x11ac>
   3f9aa:	84 31       	cpi	r24, 0x14	; 20
   3f9ac:	c8 f4       	brcc	.+50     	; 0x3f9e0 <main+0xfea>
   3f9ae:	86 30       	cpi	r24, 0x06	; 6
   3f9b0:	09 f4       	brne	.+2      	; 0x3f9b4 <main+0xfbe>
   3f9b2:	c2 c0       	rjmp	.+388    	; 0x3fb38 <main+0x1142>
   3f9b4:	87 30       	cpi	r24, 0x07	; 7
   3f9b6:	50 f4       	brcc	.+20     	; 0x3f9cc <main+0xfd6>
   3f9b8:	82 30       	cpi	r24, 0x02	; 2
   3f9ba:	09 f4       	brne	.+2      	; 0x3f9be <main+0xfc8>
   3f9bc:	f0 c0       	rjmp	.+480    	; 0x3fb9e <main+0x11a8>
   3f9be:	83 30       	cpi	r24, 0x03	; 3
   3f9c0:	09 f4       	brne	.+2      	; 0x3f9c4 <main+0xfce>
   3f9c2:	58 c0       	rjmp	.+176    	; 0x3fa74 <main+0x107e>
   3f9c4:	81 30       	cpi	r24, 0x01	; 1
   3f9c6:	09 f0       	breq	.+2      	; 0x3f9ca <main+0xfd4>
   3f9c8:	0a c2       	rjmp	.+1044   	; 0x3fdde <main+0x13e8>
   3f9ca:	3e c0       	rjmp	.+124    	; 0x3fa48 <main+0x1052>
   3f9cc:	81 31       	cpi	r24, 0x11	; 17
   3f9ce:	09 f4       	brne	.+2      	; 0x3f9d2 <main+0xfdc>
   3f9d0:	62 c0       	rjmp	.+196    	; 0x3fa96 <main+0x10a0>
   3f9d2:	82 31       	cpi	r24, 0x12	; 18
   3f9d4:	08 f0       	brcs	.+2      	; 0x3f9d8 <main+0xfe2>
   3f9d6:	a6 c0       	rjmp	.+332    	; 0x3fb24 <main+0x112e>
   3f9d8:	80 31       	cpi	r24, 0x10	; 16
   3f9da:	09 f0       	breq	.+2      	; 0x3f9de <main+0xfe8>
   3f9dc:	00 c2       	rjmp	.+1024   	; 0x3fdde <main+0x13e8>
   3f9de:	df c0       	rjmp	.+446    	; 0x3fb9e <main+0x11a8>
   3f9e0:	88 31       	cpi	r24, 0x18	; 24
   3f9e2:	09 f4       	brne	.+2      	; 0x3f9e6 <main+0xff0>
   3f9e4:	72 c0       	rjmp	.+228    	; 0x3faca <main+0x10d4>
   3f9e6:	89 31       	cpi	r24, 0x19	; 25
   3f9e8:	50 f4       	brcc	.+20     	; 0x3f9fe <main+0x1008>
   3f9ea:	85 31       	cpi	r24, 0x15	; 21
   3f9ec:	09 f4       	brne	.+2      	; 0x3f9f0 <main+0xffa>
   3f9ee:	d9 c0       	rjmp	.+434    	; 0x3fba2 <main+0x11ac>
   3f9f0:	85 31       	cpi	r24, 0x15	; 21
   3f9f2:	08 f4       	brcc	.+2      	; 0x3f9f6 <main+0x1000>
   3f9f4:	77 c1       	rjmp	.+750    	; 0x3fce4 <main+0x12ee>
   3f9f6:	86 31       	cpi	r24, 0x16	; 22
   3f9f8:	09 f0       	breq	.+2      	; 0x3f9fc <main+0x1006>
   3f9fa:	f1 c1       	rjmp	.+994    	; 0x3fdde <main+0x13e8>
   3f9fc:	73 c1       	rjmp	.+742    	; 0x3fce4 <main+0x12ee>
   3f9fe:	8a 31       	cpi	r24, 0x1A	; 26
   3fa00:	09 f4       	brne	.+2      	; 0x3fa04 <main+0x100e>
   3fa02:	57 c0       	rjmp	.+174    	; 0x3fab2 <main+0x10bc>
   3fa04:	8a 31       	cpi	r24, 0x1A	; 26
   3fa06:	08 f4       	brcc	.+2      	; 0x3fa0a <main+0x1014>
   3fa08:	7c c0       	rjmp	.+248    	; 0x3fb02 <main+0x110c>
   3fa0a:	8b 31       	cpi	r24, 0x1B	; 27
   3fa0c:	09 f4       	brne	.+2      	; 0x3fa10 <main+0x101a>
   3fa0e:	46 c0       	rjmp	.+140    	; 0x3fa9c <main+0x10a6>
   3fa10:	8d 31       	cpi	r24, 0x1D	; 29
   3fa12:	09 f0       	breq	.+2      	; 0x3fa16 <main+0x1020>
   3fa14:	e4 c1       	rjmp	.+968    	; 0x3fdde <main+0x13e8>
				case CMD_SPI_MULTI:
					{
						unsigned char answerByte;
						unsigned char flag=0;

						if ( msgBuffer[4]== 0x30 )
   3fa16:	8d 81       	ldd	r24, Y+5	; 0x05
   3fa18:	80 33       	cpi	r24, 0x30	; 48
   3fa1a:	11 f0       	breq	.+4      	; 0x3fa20 <main+0x102a>
   3fa1c:	90 e0       	ldi	r25, 0x00	; 0
   3fa1e:	0a c0       	rjmp	.+20     	; 0x3fa34 <main+0x103e>
						{
							unsigned char signatureIndex	=	msgBuffer[6];
   3fa20:	8f 81       	ldd	r24, Y+7	; 0x07

							if ( signatureIndex == 0 )
   3fa22:	88 23       	and	r24, r24
   3fa24:	11 f4       	brne	.+4      	; 0x3fa2a <main+0x1034>
   3fa26:	9e e1       	ldi	r25, 0x1E	; 30
   3fa28:	05 c0       	rjmp	.+10     	; 0x3fa34 <main+0x103e>
								answerByte	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
							else if ( signatureIndex == 1 )
   3fa2a:	81 30       	cpi	r24, 0x01	; 1
   3fa2c:	11 f0       	breq	.+4      	; 0x3fa32 <main+0x103c>
   3fa2e:	91 e0       	ldi	r25, 0x01	; 1
   3fa30:	01 c0       	rjmp	.+2      	; 0x3fa34 <main+0x103e>
   3fa32:	98 e9       	ldi	r25, 0x98	; 152
	//						flag	=	1; // Remark this line for AVRDUDE <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
							msgBuffer[1]	=	STATUS_CMD_OK;
   3fa34:	1a 82       	std	Y+2, r1	; 0x02
							msgBuffer[2]	=	0;
   3fa36:	1b 82       	std	Y+3, r1	; 0x03
							msgBuffer[3]	=	msgBuffer[4];
   3fa38:	8d 81       	ldd	r24, Y+5	; 0x05
   3fa3a:	8c 83       	std	Y+4, r24	; 0x04
							msgBuffer[4]	=	0;
   3fa3c:	1d 82       	std	Y+5, r1	; 0x05
							msgBuffer[5]	=	answerByte;
   3fa3e:	9e 83       	std	Y+6, r25	; 0x06
							msgBuffer[6]	=	STATUS_CMD_OK;
   3fa40:	1f 82       	std	Y+7, r1	; 0x07
   3fa42:	27 e0       	ldi	r18, 0x07	; 7
   3fa44:	30 e0       	ldi	r19, 0x00	; 0
   3fa46:	cf c1       	rjmp	.+926    	; 0x3fde6 <main+0x13f0>
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   3fa48:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] 	=	8;
   3fa4a:	88 e0       	ldi	r24, 0x08	; 8
   3fa4c:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3] 	=	'A';
   3fa4e:	81 e4       	ldi	r24, 0x41	; 65
   3fa50:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4] 	=	'V';
   3fa52:	86 e5       	ldi	r24, 0x56	; 86
   3fa54:	8d 83       	std	Y+5, r24	; 0x05
					msgBuffer[5] 	=	'R';
   3fa56:	82 e5       	ldi	r24, 0x52	; 82
   3fa58:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[6] 	=	'I';
   3fa5a:	89 e4       	ldi	r24, 0x49	; 73
   3fa5c:	8f 83       	std	Y+7, r24	; 0x07
					msgBuffer[7] 	=	'S';
   3fa5e:	83 e5       	ldi	r24, 0x53	; 83
   3fa60:	88 87       	std	Y+8, r24	; 0x08
					msgBuffer[8] 	=	'P';
   3fa62:	80 e5       	ldi	r24, 0x50	; 80
   3fa64:	89 87       	std	Y+9, r24	; 0x09
					msgBuffer[9] 	=	'_';
   3fa66:	8f e5       	ldi	r24, 0x5F	; 95
   3fa68:	8a 87       	std	Y+10, r24	; 0x0a
					msgBuffer[10]	=	'2';
   3fa6a:	82 e3       	ldi	r24, 0x32	; 50
   3fa6c:	8b 87       	std	Y+11, r24	; 0x0b
   3fa6e:	2b e0       	ldi	r18, 0x0B	; 11
   3fa70:	30 e0       	ldi	r19, 0x00	; 0
   3fa72:	b9 c1       	rjmp	.+882    	; 0x3fde6 <main+0x13f0>

				case CMD_GET_PARAMETER:
					{
						unsigned char value;

						switch(msgBuffer[1])
   3fa74:	8a 81       	ldd	r24, Y+2	; 0x02
   3fa76:	81 39       	cpi	r24, 0x91	; 145
   3fa78:	41 f0       	breq	.+16     	; 0x3fa8a <main+0x1094>
   3fa7a:	82 39       	cpi	r24, 0x92	; 146
   3fa7c:	41 f0       	breq	.+16     	; 0x3fa8e <main+0x1098>
   3fa7e:	80 39       	cpi	r24, 0x90	; 144
   3fa80:	11 f4       	brne	.+4      	; 0x3fa86 <main+0x1090>
   3fa82:	8f e0       	ldi	r24, 0x0F	; 15
   3fa84:	05 c0       	rjmp	.+10     	; 0x3fa90 <main+0x109a>
   3fa86:	80 e0       	ldi	r24, 0x00	; 0
   3fa88:	03 c0       	rjmp	.+6      	; 0x3fa90 <main+0x109a>
   3fa8a:	82 e0       	ldi	r24, 0x02	; 2
   3fa8c:	01 c0       	rjmp	.+2      	; 0x3fa90 <main+0x109a>
						case PARAM_HW_VER:
							value	=	CONFIG_PARAM_HW_VER;
							break;
						case PARAM_SW_MAJOR:
							value	=	CONFIG_PARAM_SW_MAJOR;
							break;
   3fa8e:	8a e0       	ldi	r24, 0x0A	; 10
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3fa90:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	value;
   3fa92:	8b 83       	std	Y+3, r24	; 0x03
   3fa94:	44 c0       	rjmp	.+136    	; 0x3fb1e <main+0x1128>
					}
					break;
   3fa96:	99 24       	eor	r9, r9
   3fa98:	93 94       	inc	r9
   3fa9a:	81 c0       	rjmp	.+258    	; 0x3fb9e <main+0x11a8>
					msgBuffer[1]	=	STATUS_CMD_OK;
					break;

				case CMD_READ_SIGNATURE_ISP:
					{
						unsigned char signatureIndex	=	msgBuffer[4];
   3fa9c:	8d 81       	ldd	r24, Y+5	; 0x05
						unsigned char signature;

						if ( signatureIndex == 0 )
   3fa9e:	88 23       	and	r24, r24
   3faa0:	11 f4       	brne	.+4      	; 0x3faa6 <main+0x10b0>
   3faa2:	8e e1       	ldi	r24, 0x1E	; 30
   3faa4:	2c c0       	rjmp	.+88     	; 0x3fafe <main+0x1108>
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
   3faa6:	81 30       	cpi	r24, 0x01	; 1
   3faa8:	11 f0       	breq	.+4      	; 0x3faae <main+0x10b8>
   3faaa:	81 e0       	ldi	r24, 0x01	; 1
   3faac:	28 c0       	rjmp	.+80     	; 0x3fafe <main+0x1108>
   3faae:	88 e9       	ldi	r24, 0x98	; 152
   3fab0:	26 c0       	rjmp	.+76     	; 0x3fafe <main+0x1108>
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3fab2:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3fab4:	e1 e0       	ldi	r30, 0x01	; 1
   3fab6:	f0 e0       	ldi	r31, 0x00	; 0
   3fab8:	89 e0       	ldi	r24, 0x09	; 9
   3faba:	80 93 57 00 	sts	0x0057, r24
   3fabe:	84 91       	lpm	r24, Z+
   3fac0:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3]	=	STATUS_CMD_OK;
   3fac2:	1c 82       	std	Y+4, r1	; 0x04
   3fac4:	24 e0       	ldi	r18, 0x04	; 4
   3fac6:	30 e0       	ldi	r19, 0x00	; 0
   3fac8:	8e c1       	rjmp	.+796    	; 0x3fde6 <main+0x13f0>

				case CMD_READ_FUSE_ISP:
					{
						unsigned char fuseBits;

						if ( msgBuffer[2] == 0x50 )
   3faca:	8b 81       	ldd	r24, Y+3	; 0x03
   3facc:	80 35       	cpi	r24, 0x50	; 80
   3face:	89 f4       	brne	.+34     	; 0x3faf2 <main+0x10fc>
						{
							if ( msgBuffer[3] == 0x08 )
   3fad0:	8c 81       	ldd	r24, Y+4	; 0x04
   3fad2:	88 30       	cpi	r24, 0x08	; 8
   3fad4:	39 f4       	brne	.+14     	; 0x3fae4 <main+0x10ee>
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3fad6:	e2 e0       	ldi	r30, 0x02	; 2
   3fad8:	f0 e0       	ldi	r31, 0x00	; 0
   3fada:	89 e0       	ldi	r24, 0x09	; 9
   3fadc:	80 93 57 00 	sts	0x0057, r24
   3fae0:	84 91       	lpm	r24, Z+
   3fae2:	0d c0       	rjmp	.+26     	; 0x3fafe <main+0x1108>
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3fae4:	e0 e0       	ldi	r30, 0x00	; 0
   3fae6:	f0 e0       	ldi	r31, 0x00	; 0
   3fae8:	89 e0       	ldi	r24, 0x09	; 9
   3faea:	80 93 57 00 	sts	0x0057, r24
   3faee:	84 91       	lpm	r24, Z+
   3faf0:	06 c0       	rjmp	.+12     	; 0x3fafe <main+0x1108>
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3faf2:	e3 e0       	ldi	r30, 0x03	; 3
   3faf4:	f0 e0       	ldi	r31, 0x00	; 0
   3faf6:	89 e0       	ldi	r24, 0x09	; 9
   3faf8:	80 93 57 00 	sts	0x0057, r24
   3fafc:	84 91       	lpm	r24, Z+
						}
						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3fafe:	1a 82       	std	Y+2, r1	; 0x02
   3fb00:	df cf       	rjmp	.-66     	; 0x3fac0 <main+0x10ca>
	#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
				case CMD_PROGRAM_LOCK_ISP:
					{
						unsigned char lockBits	=	msgBuffer[4];

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3fb02:	8d 81       	ldd	r24, Y+5	; 0x05
						boot_lock_bits_set(lockBits);		// and program it
   3fb04:	83 6c       	ori	r24, 0xC3	; 195
   3fb06:	99 e0       	ldi	r25, 0x09	; 9
   3fb08:	e1 e0       	ldi	r30, 0x01	; 1
   3fb0a:	f0 e0       	ldi	r31, 0x00	; 0
   3fb0c:	08 2e       	mov	r0, r24
   3fb0e:	90 93 57 00 	sts	0x0057, r25
   3fb12:	e8 95       	spm
						boot_spm_busy_wait();
   3fb14:	07 b6       	in	r0, 0x37	; 55
   3fb16:	00 fc       	sbrc	r0, 0
   3fb18:	fd cf       	rjmp	.-6      	; 0x3fb14 <main+0x111e>

						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3fb1a:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	STATUS_CMD_OK;
   3fb1c:	1b 82       	std	Y+3, r1	; 0x03
   3fb1e:	23 e0       	ldi	r18, 0x03	; 3
   3fb20:	30 e0       	ldi	r19, 0x00	; 0
   3fb22:	61 c1       	rjmp	.+706    	; 0x3fde6 <main+0x13f0>
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3fb24:	1a 82       	std	Y+2, r1	; 0x02
   3fb26:	ce 5c       	subi	r28, 0xCE	; 206
   3fb28:	de 4f       	sbci	r29, 0xFE	; 254
   3fb2a:	18 82       	st	Y, r1
   3fb2c:	19 82       	std	Y+1, r1	; 0x01
   3fb2e:	1a 82       	std	Y+2, r1	; 0x02
   3fb30:	1b 82       	std	Y+3, r1	; 0x03
   3fb32:	c2 53       	subi	r28, 0x32	; 50
   3fb34:	d1 40       	sbci	r29, 0x01	; 1
   3fb36:	55 c1       	rjmp	.+682    	; 0x3fde2 <main+0x13ec>
					break;

				case CMD_LOAD_ADDRESS:
	#if defined(RAMPZ)
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3fb38:	8a 81       	ldd	r24, Y+2	; 0x02
   3fb3a:	90 e0       	ldi	r25, 0x00	; 0
   3fb3c:	a0 e0       	ldi	r26, 0x00	; 0
   3fb3e:	b0 e0       	ldi	r27, 0x00	; 0
   3fb40:	58 2f       	mov	r21, r24
   3fb42:	44 27       	eor	r20, r20
   3fb44:	33 27       	eor	r19, r19
   3fb46:	22 27       	eor	r18, r18
   3fb48:	8b 81       	ldd	r24, Y+3	; 0x03
   3fb4a:	90 e0       	ldi	r25, 0x00	; 0
   3fb4c:	a0 e0       	ldi	r26, 0x00	; 0
   3fb4e:	b0 e0       	ldi	r27, 0x00	; 0
   3fb50:	dc 01       	movw	r26, r24
   3fb52:	99 27       	eor	r25, r25
   3fb54:	88 27       	eor	r24, r24
   3fb56:	28 2b       	or	r18, r24
   3fb58:	39 2b       	or	r19, r25
   3fb5a:	4a 2b       	or	r20, r26
   3fb5c:	5b 2b       	or	r21, r27
   3fb5e:	8d 81       	ldd	r24, Y+5	; 0x05
   3fb60:	90 e0       	ldi	r25, 0x00	; 0
   3fb62:	a0 e0       	ldi	r26, 0x00	; 0
   3fb64:	b0 e0       	ldi	r27, 0x00	; 0
   3fb66:	28 2b       	or	r18, r24
   3fb68:	39 2b       	or	r19, r25
   3fb6a:	4a 2b       	or	r20, r26
   3fb6c:	5b 2b       	or	r21, r27
   3fb6e:	8c 81       	ldd	r24, Y+4	; 0x04
   3fb70:	90 e0       	ldi	r25, 0x00	; 0
   3fb72:	a0 e0       	ldi	r26, 0x00	; 0
   3fb74:	b0 e0       	ldi	r27, 0x00	; 0
   3fb76:	ba 2f       	mov	r27, r26
   3fb78:	a9 2f       	mov	r26, r25
   3fb7a:	98 2f       	mov	r25, r24
   3fb7c:	88 27       	eor	r24, r24
   3fb7e:	28 2b       	or	r18, r24
   3fb80:	39 2b       	or	r19, r25
   3fb82:	4a 2b       	or	r20, r26
   3fb84:	5b 2b       	or	r21, r27
   3fb86:	22 0f       	add	r18, r18
   3fb88:	33 1f       	adc	r19, r19
   3fb8a:	44 1f       	adc	r20, r20
   3fb8c:	55 1f       	adc	r21, r21
   3fb8e:	c0 5e       	subi	r28, 0xE0	; 224
   3fb90:	de 4f       	sbci	r29, 0xFE	; 254
   3fb92:	28 83       	st	Y, r18
   3fb94:	39 83       	std	Y+1, r19	; 0x01
   3fb96:	4a 83       	std	Y+2, r20	; 0x02
   3fb98:	5b 83       	std	Y+3, r21	; 0x03
   3fb9a:	c0 52       	subi	r28, 0x20	; 32
   3fb9c:	d1 40       	sbci	r29, 0x01	; 1
	#else
					address	=	( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;		//convert word to byte address
	#endif
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3fb9e:	1a 82       	std	Y+2, r1	; 0x02
   3fba0:	20 c1       	rjmp	.+576    	; 0x3fde2 <main+0x13ec>
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3fba2:	9a 81       	ldd	r25, Y+2	; 0x02
   3fba4:	2b 81       	ldd	r18, Y+3	; 0x03
						unsigned int	data;
						unsigned char	highByte, lowByte;
						address_t		tempaddress	=	address;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3fba6:	83 31       	cpi	r24, 0x13	; 19
   3fba8:	49 f0       	breq	.+18     	; 0x3fbbc <main+0x11c6>
   3fbaa:	c0 5e       	subi	r28, 0xE0	; 224
   3fbac:	de 4f       	sbci	r29, 0xFE	; 254
   3fbae:	48 81       	ld	r20, Y
   3fbb0:	59 81       	ldd	r21, Y+1	; 0x01
   3fbb2:	6a 81       	ldd	r22, Y+2	; 0x02
   3fbb4:	7b 81       	ldd	r23, Y+3	; 0x03
   3fbb6:	c0 52       	subi	r28, 0x20	; 32
   3fbb8:	d1 40       	sbci	r29, 0x01	; 1
   3fbba:	8a c0       	rjmp	.+276    	; 0x3fcd0 <main+0x12da>
						{
							// erase only main section (bootloader protection)
							if (eraseAddress < APP_END )
   3fbbc:	ce 5c       	subi	r28, 0xCE	; 206
   3fbbe:	de 4f       	sbci	r29, 0xFE	; 254
   3fbc0:	48 81       	ld	r20, Y
   3fbc2:	59 81       	ldd	r21, Y+1	; 0x01
   3fbc4:	6a 81       	ldd	r22, Y+2	; 0x02
   3fbc6:	7b 81       	ldd	r23, Y+3	; 0x03
   3fbc8:	c2 53       	subi	r28, 0x32	; 50
   3fbca:	d1 40       	sbci	r29, 0x01	; 1
   3fbcc:	40 30       	cpi	r20, 0x00	; 0
   3fbce:	80 ec       	ldi	r24, 0xC0	; 192
   3fbd0:	58 07       	cpc	r21, r24
   3fbd2:	83 e0       	ldi	r24, 0x03	; 3
   3fbd4:	68 07       	cpc	r22, r24
   3fbd6:	80 e0       	ldi	r24, 0x00	; 0
   3fbd8:	78 07       	cpc	r23, r24
   3fbda:	f0 f4       	brcc	.+60     	; 0x3fc18 <main+0x1222>
							{
								boot_page_erase(eraseAddress);	// Perform page erase
   3fbdc:	83 e0       	ldi	r24, 0x03	; 3
   3fbde:	fa 01       	movw	r30, r20
   3fbe0:	60 93 5b 00 	sts	0x005B, r22
   3fbe4:	80 93 57 00 	sts	0x0057, r24
   3fbe8:	e8 95       	spm
								boot_spm_busy_wait();		// Wait until the memory is erased.
   3fbea:	07 b6       	in	r0, 0x37	; 55
   3fbec:	00 fc       	sbrc	r0, 0
   3fbee:	fd cf       	rjmp	.-6      	; 0x3fbea <main+0x11f4>
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3fbf0:	ce 5c       	subi	r28, 0xCE	; 206
   3fbf2:	de 4f       	sbci	r29, 0xFE	; 254
   3fbf4:	48 81       	ld	r20, Y
   3fbf6:	59 81       	ldd	r21, Y+1	; 0x01
   3fbf8:	6a 81       	ldd	r22, Y+2	; 0x02
   3fbfa:	7b 81       	ldd	r23, Y+3	; 0x03
   3fbfc:	c2 53       	subi	r28, 0x32	; 50
   3fbfe:	d1 40       	sbci	r29, 0x01	; 1
   3fc00:	40 50       	subi	r20, 0x00	; 0
   3fc02:	5f 4f       	sbci	r21, 0xFF	; 255
   3fc04:	6f 4f       	sbci	r22, 0xFF	; 255
   3fc06:	7f 4f       	sbci	r23, 0xFF	; 255
   3fc08:	ce 5c       	subi	r28, 0xCE	; 206
   3fc0a:	de 4f       	sbci	r29, 0xFE	; 254
   3fc0c:	48 83       	st	Y, r20
   3fc0e:	59 83       	std	Y+1, r21	; 0x01
   3fc10:	6a 83       	std	Y+2, r22	; 0x02
   3fc12:	7b 83       	std	Y+3, r23	; 0x03
   3fc14:	c2 53       	subi	r28, 0x32	; 50
   3fc16:	d1 40       	sbci	r29, 0x01	; 1
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3fc18:	c9 5c       	subi	r28, 0xC9	; 201
   3fc1a:	de 4f       	sbci	r29, 0xFE	; 254
   3fc1c:	98 83       	st	Y, r25
   3fc1e:	c7 53       	subi	r28, 0x37	; 55
   3fc20:	d1 40       	sbci	r29, 0x01	; 1
   3fc22:	ca 5c       	subi	r28, 0xCA	; 202
   3fc24:	de 4f       	sbci	r29, 0xFE	; 254
   3fc26:	18 82       	st	Y, r1
   3fc28:	c6 53       	subi	r28, 0x36	; 54
   3fc2a:	d1 40       	sbci	r29, 0x01	; 1
   3fc2c:	02 2f       	mov	r16, r18
   3fc2e:	10 e0       	ldi	r17, 0x00	; 0
   3fc30:	ca 5c       	subi	r28, 0xCA	; 202
   3fc32:	de 4f       	sbci	r29, 0xFE	; 254
   3fc34:	68 81       	ld	r22, Y
   3fc36:	79 81       	ldd	r23, Y+1	; 0x01
   3fc38:	c6 53       	subi	r28, 0x36	; 54
   3fc3a:	d1 40       	sbci	r29, 0x01	; 1
   3fc3c:	06 2b       	or	r16, r22
   3fc3e:	17 2b       	or	r17, r23
   3fc40:	c0 5e       	subi	r28, 0xE0	; 224
   3fc42:	de 4f       	sbci	r29, 0xFE	; 254
   3fc44:	48 81       	ld	r20, Y
   3fc46:	59 81       	ldd	r21, Y+1	; 0x01
   3fc48:	6a 81       	ldd	r22, Y+2	; 0x02
   3fc4a:	7b 81       	ldd	r23, Y+3	; 0x03
   3fc4c:	c0 52       	subi	r28, 0x20	; 32
   3fc4e:	d1 40       	sbci	r29, 0x01	; 1
   3fc50:	de 01       	movw	r26, r28
   3fc52:	1b 96       	adiw	r26, 0x0b	; 11
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   3fc54:	31 e0       	ldi	r19, 0x01	; 1
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
							}

							/* Write FLASH */
							do {
								lowByte		=	*p++;
   3fc56:	8c 91       	ld	r24, X
								highByte 	=	*p++;
   3fc58:	11 96       	adiw	r26, 0x01	; 1
   3fc5a:	2c 91       	ld	r18, X
   3fc5c:	11 97       	sbiw	r26, 0x01	; 1



//*****************************************************************************
int main(void)
{
   3fc5e:	12 96       	adiw	r26, 0x02	; 2
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   3fc60:	c7 5c       	subi	r28, 0xC7	; 199
   3fc62:	de 4f       	sbci	r29, 0xFE	; 254
   3fc64:	28 83       	st	Y, r18
   3fc66:	c9 53       	subi	r28, 0x39	; 57
   3fc68:	d1 40       	sbci	r29, 0x01	; 1
   3fc6a:	c8 5c       	subi	r28, 0xC8	; 200
   3fc6c:	de 4f       	sbci	r29, 0xFE	; 254
   3fc6e:	18 82       	st	Y, r1
   3fc70:	c8 53       	subi	r28, 0x38	; 56
   3fc72:	d1 40       	sbci	r29, 0x01	; 1
   3fc74:	90 e0       	ldi	r25, 0x00	; 0
   3fc76:	c8 5c       	subi	r28, 0xC8	; 200
   3fc78:	de 4f       	sbci	r29, 0xFE	; 254
   3fc7a:	e8 81       	ld	r30, Y
   3fc7c:	f9 81       	ldd	r31, Y+1	; 0x01
   3fc7e:	c8 53       	subi	r28, 0x38	; 56
   3fc80:	d1 40       	sbci	r29, 0x01	; 1
   3fc82:	8e 2b       	or	r24, r30
   3fc84:	9f 2b       	or	r25, r31
   3fc86:	0c 01       	movw	r0, r24
   3fc88:	fa 01       	movw	r30, r20
   3fc8a:	60 93 5b 00 	sts	0x005B, r22
   3fc8e:	30 93 57 00 	sts	0x0057, r19
   3fc92:	e8 95       	spm
   3fc94:	11 24       	eor	r1, r1

								address	=	address + 2;	// Select next word in memory
   3fc96:	4e 5f       	subi	r20, 0xFE	; 254
   3fc98:	5f 4f       	sbci	r21, 0xFF	; 255
   3fc9a:	6f 4f       	sbci	r22, 0xFF	; 255
   3fc9c:	7f 4f       	sbci	r23, 0xFF	; 255
								size	-=	2;				// Reduce number of bytes to write by two
   3fc9e:	02 50       	subi	r16, 0x02	; 2
   3fca0:	10 40       	sbci	r17, 0x00	; 0
							} while (size);					// Loop until all bytes written
   3fca2:	c9 f6       	brne	.-78     	; 0x3fc56 <main+0x1260>

							boot_page_write(tempaddress);
   3fca4:	85 e0       	ldi	r24, 0x05	; 5
   3fca6:	c0 5e       	subi	r28, 0xE0	; 224
   3fca8:	de 4f       	sbci	r29, 0xFE	; 254
   3fcaa:	e8 80       	ld	r14, Y
   3fcac:	f9 80       	ldd	r15, Y+1	; 0x01
   3fcae:	0a 81       	ldd	r16, Y+2	; 0x02
   3fcb0:	1b 81       	ldd	r17, Y+3	; 0x03
   3fcb2:	c0 52       	subi	r28, 0x20	; 32
   3fcb4:	d1 40       	sbci	r29, 0x01	; 1
   3fcb6:	f7 01       	movw	r30, r14
   3fcb8:	00 93 5b 00 	sts	0x005B, r16
   3fcbc:	80 93 57 00 	sts	0x0057, r24
   3fcc0:	e8 95       	spm
							boot_spm_busy_wait();
   3fcc2:	07 b6       	in	r0, 0x37	; 55
   3fcc4:	00 fc       	sbrc	r0, 0
   3fcc6:	fd cf       	rjmp	.-6      	; 0x3fcc2 <main+0x12cc>
							boot_rww_enable();				// Re-enable the RWW section
   3fcc8:	81 e1       	ldi	r24, 0x11	; 17
   3fcca:	80 93 57 00 	sts	0x0057, r24
   3fcce:	e8 95       	spm
								size--;						// Decrease number of bytes to write
							} while (size);					// Loop until all bytes written
						#endif
						}
							msgLength	=	2;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3fcd0:	1a 82       	std	Y+2, r1	; 0x02
   3fcd2:	c0 5e       	subi	r28, 0xE0	; 224
   3fcd4:	de 4f       	sbci	r29, 0xFE	; 254
   3fcd6:	48 83       	st	Y, r20
   3fcd8:	59 83       	std	Y+1, r21	; 0x01
   3fcda:	6a 83       	std	Y+2, r22	; 0x02
   3fcdc:	7b 83       	std	Y+3, r23	; 0x03
   3fcde:	c0 52       	subi	r28, 0x20	; 32
   3fce0:	d1 40       	sbci	r29, 0x01	; 1
   3fce2:	7f c0       	rjmp	.+254    	; 0x3fde2 <main+0x13ec>
					break;

				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3fce4:	fa 80       	ldd	r15, Y+2	; 0x02
   3fce6:	c5 5c       	subi	r28, 0xC5	; 197
   3fce8:	de 4f       	sbci	r29, 0xFE	; 254
   3fcea:	f8 82       	st	Y, r15
   3fcec:	cb 53       	subi	r28, 0x3B	; 59
   3fcee:	d1 40       	sbci	r29, 0x01	; 1
   3fcf0:	c6 5c       	subi	r28, 0xC6	; 198
   3fcf2:	de 4f       	sbci	r29, 0xFE	; 254
   3fcf4:	18 82       	st	Y, r1
   3fcf6:	ca 53       	subi	r28, 0x3A	; 58
   3fcf8:	d1 40       	sbci	r29, 0x01	; 1
   3fcfa:	8b 81       	ldd	r24, Y+3	; 0x03
   3fcfc:	c8 2e       	mov	r12, r24
   3fcfe:	dd 24       	eor	r13, r13
   3fd00:	c6 5c       	subi	r28, 0xC6	; 198
   3fd02:	de 4f       	sbci	r29, 0xFE	; 254
   3fd04:	08 81       	ld	r16, Y
   3fd06:	19 81       	ldd	r17, Y+1	; 0x01
   3fd08:	ca 53       	subi	r28, 0x3A	; 58
   3fd0a:	d1 40       	sbci	r29, 0x01	; 1
   3fd0c:	c0 2a       	or	r12, r16
   3fd0e:	d1 2a       	or	r13, r17
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
   3fd10:	1a 82       	std	Y+2, r1	; 0x02
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3fd12:	89 81       	ldd	r24, Y+1	; 0x01
   3fd14:	be 01       	movw	r22, r28
   3fd16:	6d 5f       	subi	r22, 0xFD	; 253
   3fd18:	7f 4f       	sbci	r23, 0xFF	; 255
   3fd1a:	84 31       	cpi	r24, 0x14	; 20
   3fd1c:	21 f5       	brne	.+72     	; 0x3fd66 <main+0x1370>
   3fd1e:	96 01       	movw	r18, r12

							// Read FLASH
							do {
						//#if defined(RAMPZ)
						#if (FLASHEND > 0x10000)
								data	=	pgm_read_word_far(address);
   3fd20:	c0 5e       	subi	r28, 0xE0	; 224
   3fd22:	de 4f       	sbci	r29, 0xFE	; 254
   3fd24:	e8 80       	ld	r14, Y
   3fd26:	f9 80       	ldd	r15, Y+1	; 0x01
   3fd28:	0a 81       	ldd	r16, Y+2	; 0x02
   3fd2a:	1b 81       	ldd	r17, Y+3	; 0x03
   3fd2c:	c0 52       	subi	r28, 0x20	; 32
   3fd2e:	d1 40       	sbci	r29, 0x01	; 1
   3fd30:	0b bf       	out	0x3b, r16	; 59
   3fd32:	f7 01       	movw	r30, r14
   3fd34:	87 91       	elpm	r24, Z+
   3fd36:	96 91       	elpm	r25, Z+
						#else
								data	=	pgm_read_word_near(address);
						#endif
								*p++	=	(unsigned char)data;		//LSB
   3fd38:	db 01       	movw	r26, r22
   3fd3a:	8c 93       	st	X, r24
								*p++	=	(unsigned char)(data >> 8);	//MSB
   3fd3c:	11 96       	adiw	r26, 0x01	; 1
   3fd3e:	9c 93       	st	X, r25



//*****************************************************************************
int main(void)
{
   3fd40:	6e 5f       	subi	r22, 0xFE	; 254
   3fd42:	7f 4f       	sbci	r23, 0xFF	; 255
						#else
								data	=	pgm_read_word_near(address);
						#endif
								*p++	=	(unsigned char)data;		//LSB
								*p++	=	(unsigned char)(data >> 8);	//MSB
								address	+=	2;							// Select next word in memory
   3fd44:	d8 01       	movw	r26, r16
   3fd46:	c7 01       	movw	r24, r14
   3fd48:	02 96       	adiw	r24, 0x02	; 2
   3fd4a:	a1 1d       	adc	r26, r1
   3fd4c:	b1 1d       	adc	r27, r1
   3fd4e:	c0 5e       	subi	r28, 0xE0	; 224
   3fd50:	de 4f       	sbci	r29, 0xFE	; 254
   3fd52:	88 83       	st	Y, r24
   3fd54:	99 83       	std	Y+1, r25	; 0x01
   3fd56:	aa 83       	std	Y+2, r26	; 0x02
   3fd58:	bb 83       	std	Y+3, r27	; 0x03
   3fd5a:	c0 52       	subi	r28, 0x20	; 32
   3fd5c:	d1 40       	sbci	r29, 0x01	; 1
								size	-=	2;
   3fd5e:	22 50       	subi	r18, 0x02	; 2
   3fd60:	30 40       	sbci	r19, 0x00	; 0
							}while (size);
   3fd62:	f1 f6       	brne	.-68     	; 0x3fd20 <main+0x132a>
   3fd64:	36 c0       	rjmp	.+108    	; 0x3fdd2 <main+0x13dc>
   3fd66:	c0 5e       	subi	r28, 0xE0	; 224
   3fd68:	de 4f       	sbci	r29, 0xFE	; 254
   3fd6a:	28 81       	ld	r18, Y
   3fd6c:	39 81       	ldd	r19, Y+1	; 0x01
   3fd6e:	4a 81       	ldd	r20, Y+2	; 0x02
   3fd70:	5b 81       	ldd	r21, Y+3	; 0x03
   3fd72:	c0 52       	subi	r28, 0x20	; 32
   3fd74:	d1 40       	sbci	r29, 0x01	; 1



//*****************************************************************************
int main(void)
{
   3fd76:	08 94       	sec
   3fd78:	c1 08       	sbc	r12, r1
   3fd7a:	d1 08       	sbc	r13, r1
								EEARH	=	((address >> 8));
								address++;					// Select next EEPROM byte
								EECR	|=	(1<<EERE);			// Read EEPROM
								*p++	=	EEDR;				// Send EEPROM data
								size--;
							} while (size);
   3fd7c:	76 01       	movw	r14, r12
   3fd7e:	00 e0       	ldi	r16, 0x00	; 0
   3fd80:	10 e0       	ldi	r17, 0x00	; 0
   3fd82:	08 94       	sec
   3fd84:	c1 1c       	adc	r12, r1
   3fd86:	d1 1c       	adc	r13, r1
   3fd88:	08 94       	sec
   3fd8a:	e1 1c       	adc	r14, r1
   3fd8c:	f1 1c       	adc	r15, r1
   3fd8e:	01 1d       	adc	r16, r1
   3fd90:	11 1d       	adc	r17, r1
   3fd92:	e2 0e       	add	r14, r18
   3fd94:	f3 1e       	adc	r15, r19
   3fd96:	04 1f       	adc	r16, r20
   3fd98:	15 1f       	adc	r17, r21
						}
						else
						{
							/* Read EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   3fd9a:	21 bd       	out	0x21, r18	; 33
								EEARH	=	((address >> 8));
   3fd9c:	bb 27       	eor	r27, r27
   3fd9e:	a5 2f       	mov	r26, r21
   3fda0:	94 2f       	mov	r25, r20
   3fda2:	83 2f       	mov	r24, r19
   3fda4:	82 bd       	out	0x22, r24	; 34
								address++;					// Select next EEPROM byte
   3fda6:	2f 5f       	subi	r18, 0xFF	; 255
   3fda8:	3f 4f       	sbci	r19, 0xFF	; 255
   3fdaa:	4f 4f       	sbci	r20, 0xFF	; 255
   3fdac:	5f 4f       	sbci	r21, 0xFF	; 255
								EECR	|=	(1<<EERE);			// Read EEPROM
   3fdae:	f8 9a       	sbi	0x1f, 0	; 31
								*p++	=	EEDR;				// Send EEPROM data
   3fdb0:	80 b5       	in	r24, 0x20	; 32
   3fdb2:	db 01       	movw	r26, r22
   3fdb4:	8d 93       	st	X+, r24
   3fdb6:	bd 01       	movw	r22, r26
								size--;
							} while (size);
   3fdb8:	2e 15       	cp	r18, r14
   3fdba:	3f 05       	cpc	r19, r15
   3fdbc:	40 07       	cpc	r20, r16
   3fdbe:	51 07       	cpc	r21, r17
   3fdc0:	61 f7       	brne	.-40     	; 0x3fd9a <main+0x13a4>
   3fdc2:	c0 5e       	subi	r28, 0xE0	; 224
   3fdc4:	de 4f       	sbci	r29, 0xFE	; 254
   3fdc6:	28 83       	st	Y, r18
   3fdc8:	39 83       	std	Y+1, r19	; 0x01
   3fdca:	4a 83       	std	Y+2, r20	; 0x02
   3fdcc:	5b 83       	std	Y+3, r21	; 0x03
   3fdce:	c0 52       	subi	r28, 0x20	; 32
   3fdd0:	d1 40       	sbci	r29, 0x01	; 1
				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;
   3fdd2:	96 01       	movw	r18, r12
   3fdd4:	2d 5f       	subi	r18, 0xFD	; 253
   3fdd6:	3f 4f       	sbci	r19, 0xFF	; 255
								EECR	|=	(1<<EERE);			// Read EEPROM
								*p++	=	EEDR;				// Send EEPROM data
								size--;
							} while (size);
						}
						*p++	=	STATUS_CMD_OK;
   3fdd8:	fb 01       	movw	r30, r22
   3fdda:	10 82       	st	Z, r1
   3fddc:	04 c0       	rjmp	.+8      	; 0x3fde6 <main+0x13f0>
					}
					break;

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   3fdde:	80 ec       	ldi	r24, 0xC0	; 192
   3fde0:	8a 83       	std	Y+2, r24	; 0x02
   3fde2:	22 e0       	ldi	r18, 0x02	; 2
   3fde4:	30 e0       	ldi	r19, 0x00	; 0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3fde6:	8b e1       	ldi	r24, 0x1B	; 27
   3fde8:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3fdec:	80 91 c0 00 	lds	r24, 0x00C0
   3fdf0:	86 ff       	sbrs	r24, 6
   3fdf2:	fc cf       	rjmp	.-8      	; 0x3fdec <main+0x13f6>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3fdf4:	80 91 c0 00 	lds	r24, 0x00C0
   3fdf8:	80 64       	ori	r24, 0x40	; 64
   3fdfa:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3fdfe:	c1 5d       	subi	r28, 0xD1	; 209
   3fe00:	de 4f       	sbci	r29, 0xFE	; 254
   3fe02:	f8 81       	ld	r31, Y
   3fe04:	cf 52       	subi	r28, 0x2F	; 47
   3fe06:	d1 40       	sbci	r29, 0x01	; 1
   3fe08:	f0 93 c6 00 	sts	0x00C6, r31
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3fe0c:	80 91 c0 00 	lds	r24, 0x00C0
   3fe10:	86 ff       	sbrs	r24, 6
   3fe12:	fc cf       	rjmp	.-8      	; 0x3fe0c <main+0x1416>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3fe14:	80 91 c0 00 	lds	r24, 0x00C0
   3fe18:	80 64       	ori	r24, 0x40	; 64
   3fe1a:	80 93 c0 00 	sts	0x00C0, r24
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
   3fe1e:	43 2f       	mov	r20, r19
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3fe20:	30 93 c6 00 	sts	0x00C6, r19
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3fe24:	80 91 c0 00 	lds	r24, 0x00C0
   3fe28:	86 ff       	sbrs	r24, 6
   3fe2a:	fc cf       	rjmp	.-8      	; 0x3fe24 <main+0x142e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3fe2c:	80 91 c0 00 	lds	r24, 0x00C0
   3fe30:	80 64       	ori	r24, 0x40	; 64
   3fe32:	80 93 c0 00 	sts	0x00C0, r24

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;

			c			=	msgLength&0x00FF;
   3fe36:	92 2f       	mov	r25, r18
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3fe38:	20 93 c6 00 	sts	0x00C6, r18
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3fe3c:	80 91 c0 00 	lds	r24, 0x00C0
   3fe40:	86 ff       	sbrs	r24, 6
   3fe42:	fc cf       	rjmp	.-8      	; 0x3fe3c <main+0x1446>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3fe44:	80 91 c0 00 	lds	r24, 0x00C0
   3fe48:	80 64       	ori	r24, 0x40	; 64
   3fe4a:	80 93 c0 00 	sts	0x00C0, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3fe4e:	8e e0       	ldi	r24, 0x0E	; 14
   3fe50:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3fe54:	80 91 c0 00 	lds	r24, 0x00C0
   3fe58:	86 ff       	sbrs	r24, 6
   3fe5a:	fc cf       	rjmp	.-8      	; 0x3fe54 <main+0x145e>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3fe5c:	80 91 c0 00 	lds	r24, 0x00C0
   3fe60:	80 64       	ori	r24, 0x40	; 64
   3fe62:	80 93 c0 00 	sts	0x00C0, r24
			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;
   3fe66:	65 e1       	ldi	r22, 0x15	; 21
   3fe68:	c1 5d       	subi	r28, 0xD1	; 209
   3fe6a:	de 4f       	sbci	r29, 0xFE	; 254
   3fe6c:	e8 80       	ld	r14, Y
   3fe6e:	cf 52       	subi	r28, 0x2F	; 47
   3fe70:	d1 40       	sbci	r29, 0x01	; 1
   3fe72:	6e 25       	eor	r22, r14

			c			=	msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
   3fe74:	69 27       	eor	r22, r25

			sendchar(TOKEN);
			checksum ^= TOKEN;
   3fe76:	64 27       	eor	r22, r20
   3fe78:	fe 01       	movw	r30, r28
   3fe7a:	31 96       	adiw	r30, 0x01	; 1
   3fe7c:	10 c0       	rjmp	.+32     	; 0x3fe9e <main+0x14a8>

			p	=	msgBuffer;
			while ( msgLength )
			{
				c	=	*p++;
   3fe7e:	90 81       	ld	r25, Z
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3fe80:	90 93 c6 00 	sts	0x00C6, r25
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3fe84:	80 91 c0 00 	lds	r24, 0x00C0
   3fe88:	86 ff       	sbrs	r24, 6
   3fe8a:	fc cf       	rjmp	.-8      	; 0x3fe84 <main+0x148e>
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
			{
				c	=	*p++;
   3fe8c:	31 96       	adiw	r30, 0x01	; 1
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3fe8e:	80 91 c0 00 	lds	r24, 0x00C0
   3fe92:	80 64       	ori	r24, 0x40	; 64
   3fe94:	80 93 c0 00 	sts	0x00C0, r24
			p	=	msgBuffer;
			while ( msgLength )
			{
				c	=	*p++;
				sendchar(c);
				checksum ^=c;
   3fe98:	69 27       	eor	r22, r25
				msgLength--;
   3fe9a:	21 50       	subi	r18, 0x01	; 1
   3fe9c:	30 40       	sbci	r19, 0x00	; 0

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
   3fe9e:	21 15       	cp	r18, r1
   3fea0:	31 05       	cpc	r19, r1
   3fea2:	69 f7       	brne	.-38     	; 0x3fe7e <main+0x1488>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3fea4:	60 93 c6 00 	sts	0x00C6, r22
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3fea8:	80 91 c0 00 	lds	r24, 0x00C0
   3feac:	86 ff       	sbrs	r24, 6
   3feae:	fc cf       	rjmp	.-8      	; 0x3fea8 <main+0x14b2>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3feb0:	80 91 c0 00 	lds	r24, 0x00C0
   3feb4:	80 64       	ori	r24, 0x40	; 64
   3feb6:	80 93 c0 00 	sts	0x00C0, r24
			sendchar(checksum);
			seqNum++;
	
		#ifndef REMOVE_BOOTLOADER_LED
			//*	<MLS>	toggle the LED
			PROGLED_PORT	^=	(1<<PROGLED_PIN);	// active high LED ON
   3feba:	85 b1       	in	r24, 0x05	; 5
   3febc:	80 58       	subi	r24, 0x80	; 128
   3febe:	85 b9       	out	0x05, r24	; 5


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   3fec0:	99 20       	and	r9, r9
   3fec2:	81 f4       	brne	.+32     	; 0x3fee4 <main+0x14ee>
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
			seqNum++;
   3fec4:	c1 5d       	subi	r28, 0xD1	; 209
   3fec6:	de 4f       	sbci	r29, 0xFE	; 254
   3fec8:	08 81       	ld	r16, Y
   3feca:	cf 52       	subi	r28, 0x2F	; 47
   3fecc:	d1 40       	sbci	r29, 0x01	; 1
   3fece:	0f 5f       	subi	r16, 0xFF	; 255
   3fed0:	c1 5d       	subi	r28, 0xD1	; 209
   3fed2:	de 4f       	sbci	r29, 0xFE	; 254
   3fed4:	08 83       	st	Y, r16
   3fed6:	cf 52       	subi	r28, 0x2F	; 47
   3fed8:	d1 40       	sbci	r29, 0x01	; 1
   3feda:	90 e0       	ldi	r25, 0x00	; 0
   3fedc:	a0 e0       	ldi	r26, 0x00	; 0
   3fede:	b0 e0       	ldi	r27, 0x00	; 0
   3fee0:	0d 94 9a f5 	jmp	0x3eb34	; 0x3eb34 <main+0x13e>
	delay_ms(100);
#endif


#ifndef REMOVE_BOOTLOADER_LED
	PROGLED_DDR		&=	~(1<<PROGLED_PIN);	// set to default
   3fee4:	27 98       	cbi	0x04, 7	; 4
	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED OFF
   3fee6:	2f 98       	cbi	0x05, 7	; 5
   3fee8:	80 e0       	ldi	r24, 0x00	; 0
   3feea:	90 e0       	ldi	r25, 0x00	; 0
   3feec:	20 ed       	ldi	r18, 0xD0	; 208
   3feee:	37 e0       	ldi	r19, 0x07	; 7
   3fef0:	f9 01       	movw	r30, r18
   3fef2:	31 97       	sbiw	r30, 0x01	; 1
   3fef4:	f1 f7       	brne	.-4      	; 0x3fef2 <main+0x14fc>

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3fef6:	01 96       	adiw	r24, 0x01	; 1
   3fef8:	84 36       	cpi	r24, 0x64	; 100
   3fefa:	91 05       	cpc	r25, r1
   3fefc:	c9 f7       	brne	.-14     	; 0x3fef0 <main+0x14fa>
//	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED OFf
	delay_ms(100);							// delay after exit
#endif


	asm volatile ("nop");			// wait until port has changed
   3fefe:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   3ff00:	80 91 c0 00 	lds	r24, 0x00C0
   3ff04:	8d 7f       	andi	r24, 0xFD	; 253
   3ff06:	80 93 c0 00 	sts	0x00C0, r24
	boot_rww_enable();				// enable application section
   3ff0a:	81 e1       	ldi	r24, 0x11	; 17
   3ff0c:	80 93 57 00 	sts	0x0057, r24
   3ff10:	e8 95       	spm


	asm volatile(
   3ff12:	ee 27       	eor	r30, r30
   3ff14:	ff 27       	eor	r31, r31
   3ff16:	09 94       	ijmp
   3ff18:	ff cf       	rjmp	.-2      	; 0x3ff18 <main+0x1522>
   3ff1a:	90 e0       	ldi	r25, 0x00	; 0
   3ff1c:	0d 94 9a f5 	jmp	0x3eb34	; 0x3eb34 <main+0x13e>

0003ff20 <__divmodhi4>:
   3ff20:	97 fb       	bst	r25, 7
   3ff22:	09 2e       	mov	r0, r25
   3ff24:	07 26       	eor	r0, r23
   3ff26:	0a d0       	rcall	.+20     	; 0x3ff3c <__divmodhi4_neg1>
   3ff28:	77 fd       	sbrc	r23, 7
   3ff2a:	04 d0       	rcall	.+8      	; 0x3ff34 <__divmodhi4_neg2>
   3ff2c:	2e d0       	rcall	.+92     	; 0x3ff8a <__udivmodhi4>
   3ff2e:	06 d0       	rcall	.+12     	; 0x3ff3c <__divmodhi4_neg1>
   3ff30:	00 20       	and	r0, r0
   3ff32:	1a f4       	brpl	.+6      	; 0x3ff3a <__divmodhi4_exit>

0003ff34 <__divmodhi4_neg2>:
   3ff34:	70 95       	com	r23
   3ff36:	61 95       	neg	r22
   3ff38:	7f 4f       	sbci	r23, 0xFF	; 255

0003ff3a <__divmodhi4_exit>:
   3ff3a:	08 95       	ret

0003ff3c <__divmodhi4_neg1>:
   3ff3c:	f6 f7       	brtc	.-4      	; 0x3ff3a <__divmodhi4_exit>
   3ff3e:	90 95       	com	r25
   3ff40:	81 95       	neg	r24
   3ff42:	9f 4f       	sbci	r25, 0xFF	; 255
   3ff44:	08 95       	ret

0003ff46 <__udivmodsi4>:
   3ff46:	a1 e2       	ldi	r26, 0x21	; 33
   3ff48:	1a 2e       	mov	r1, r26
   3ff4a:	aa 1b       	sub	r26, r26
   3ff4c:	bb 1b       	sub	r27, r27
   3ff4e:	fd 01       	movw	r30, r26
   3ff50:	0d c0       	rjmp	.+26     	; 0x3ff6c <__udivmodsi4_ep>

0003ff52 <__udivmodsi4_loop>:
   3ff52:	aa 1f       	adc	r26, r26
   3ff54:	bb 1f       	adc	r27, r27
   3ff56:	ee 1f       	adc	r30, r30
   3ff58:	ff 1f       	adc	r31, r31
   3ff5a:	a2 17       	cp	r26, r18
   3ff5c:	b3 07       	cpc	r27, r19
   3ff5e:	e4 07       	cpc	r30, r20
   3ff60:	f5 07       	cpc	r31, r21
   3ff62:	20 f0       	brcs	.+8      	; 0x3ff6c <__udivmodsi4_ep>
   3ff64:	a2 1b       	sub	r26, r18
   3ff66:	b3 0b       	sbc	r27, r19
   3ff68:	e4 0b       	sbc	r30, r20
   3ff6a:	f5 0b       	sbc	r31, r21

0003ff6c <__udivmodsi4_ep>:
   3ff6c:	66 1f       	adc	r22, r22
   3ff6e:	77 1f       	adc	r23, r23
   3ff70:	88 1f       	adc	r24, r24
   3ff72:	99 1f       	adc	r25, r25
   3ff74:	1a 94       	dec	r1
   3ff76:	69 f7       	brne	.-38     	; 0x3ff52 <__udivmodsi4_loop>
   3ff78:	60 95       	com	r22
   3ff7a:	70 95       	com	r23
   3ff7c:	80 95       	com	r24
   3ff7e:	90 95       	com	r25
   3ff80:	9b 01       	movw	r18, r22
   3ff82:	ac 01       	movw	r20, r24
   3ff84:	bd 01       	movw	r22, r26
   3ff86:	cf 01       	movw	r24, r30
   3ff88:	08 95       	ret

0003ff8a <__udivmodhi4>:
   3ff8a:	aa 1b       	sub	r26, r26
   3ff8c:	bb 1b       	sub	r27, r27
   3ff8e:	51 e1       	ldi	r21, 0x11	; 17
   3ff90:	07 c0       	rjmp	.+14     	; 0x3ffa0 <__udivmodhi4_ep>

0003ff92 <__udivmodhi4_loop>:
   3ff92:	aa 1f       	adc	r26, r26
   3ff94:	bb 1f       	adc	r27, r27
   3ff96:	a6 17       	cp	r26, r22
   3ff98:	b7 07       	cpc	r27, r23
   3ff9a:	10 f0       	brcs	.+4      	; 0x3ffa0 <__udivmodhi4_ep>
   3ff9c:	a6 1b       	sub	r26, r22
   3ff9e:	b7 0b       	sbc	r27, r23

0003ffa0 <__udivmodhi4_ep>:
   3ffa0:	88 1f       	adc	r24, r24
   3ffa2:	99 1f       	adc	r25, r25
   3ffa4:	5a 95       	dec	r21
   3ffa6:	a9 f7       	brne	.-22     	; 0x3ff92 <__udivmodhi4_loop>
   3ffa8:	80 95       	com	r24
   3ffaa:	90 95       	com	r25
   3ffac:	bc 01       	movw	r22, r24
   3ffae:	cd 01       	movw	r24, r26
   3ffb0:	08 95       	ret

0003ffb2 <__eerd_byte_m2560>:
   3ffb2:	f9 99       	sbic	0x1f, 1	; 31
   3ffb4:	fe cf       	rjmp	.-4      	; 0x3ffb2 <__eerd_byte_m2560>
   3ffb6:	92 bd       	out	0x22, r25	; 34
   3ffb8:	81 bd       	out	0x21, r24	; 33
   3ffba:	f8 9a       	sbi	0x1f, 0	; 31
   3ffbc:	99 27       	eor	r25, r25
   3ffbe:	80 b5       	in	r24, 0x20	; 32
   3ffc0:	08 95       	ret

0003ffc2 <__eewr_byte_m2560>:
   3ffc2:	26 2f       	mov	r18, r22

0003ffc4 <__eewr_r18_m2560>:
   3ffc4:	f9 99       	sbic	0x1f, 1	; 31
   3ffc6:	fe cf       	rjmp	.-4      	; 0x3ffc4 <__eewr_r18_m2560>
   3ffc8:	1f ba       	out	0x1f, r1	; 31
   3ffca:	92 bd       	out	0x22, r25	; 34
   3ffcc:	81 bd       	out	0x21, r24	; 33
   3ffce:	20 bd       	out	0x20, r18	; 32
   3ffd0:	0f b6       	in	r0, 0x3f	; 63
   3ffd2:	f8 94       	cli
   3ffd4:	fa 9a       	sbi	0x1f, 2	; 31
   3ffd6:	f9 9a       	sbi	0x1f, 1	; 31
   3ffd8:	0f be       	out	0x3f, r0	; 63
   3ffda:	01 96       	adiw	r24, 0x01	; 1
   3ffdc:	08 95       	ret

0003ffde <_exit>:
   3ffde:	f8 94       	cli

0003ffe0 <__stop_program>:
   3ffe0:	ff cf       	rjmp	.-2      	; 0x3ffe0 <__stop_program>
